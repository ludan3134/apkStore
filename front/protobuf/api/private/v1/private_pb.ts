// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file api/private/v1/private.proto (package api.private.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * *
 * at:string;
 * apk:string;
 * mw:string;
 *
 * @generated from message api.private.v1.Location
 */
export class Location extends Message<Location> {
  /**
   * @generated from field: string apk_type = 1;
   */
  apkType = "";

  /**
   * @generated from field: string mw_version = 2;
   */
  mwVersion = "";

  /**
   * @generated from field: string access_token = 3;
   */
  accessToken = "";

  /**
   * @generated from field: repeated api.private.v1.Record data = 4;
   */
  data: Record[] = [];

  constructor(data?: PartialMessage<Location>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.private.v1.Location";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "apk_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "mw_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "data", kind: "message", T: Record, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Location {
    return new Location().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Location {
    return new Location().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Location {
    return new Location().fromJsonString(jsonString, options);
  }

  static equals(a: Location | PlainMessage<Location> | undefined, b: Location | PlainMessage<Location> | undefined): boolean {
    return proto3.util.equals(Location, a, b);
  }
}

/**
 * @generated from message api.private.v1.Record
 */
export class Record extends Message<Record> {
  /**
   * @generated from field: string mw_version = 1;
   */
  mwVersion = "";

  /**
   * apk id
   *
   * @generated from field: string service_type = 2;
   */
  serviceType = "";

  /**
   * url
   *
   * @generated from field: string url = 3;
   */
  url = "";

  constructor(data?: PartialMessage<Record>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.private.v1.Record";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mw_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "service_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Record {
    return new Record().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Record {
    return new Record().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Record {
    return new Record().fromJsonString(jsonString, options);
  }

  static equals(a: Record | PlainMessage<Record> | undefined, b: Record | PlainMessage<Record> | undefined): boolean {
    return proto3.util.equals(Record, a, b);
  }
}

