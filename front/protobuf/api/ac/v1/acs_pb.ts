// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file api/ac/v1/acs.proto (package api.ac.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Device } from "./acm_pb.ts";

/**
 * @generated from message api.ac.v1.SignUpRequest
 */
export class SignUpRequest extends Message<SignUpRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: string mac = 3;
   */
  mac = "";

  /**
   * @generated from field: string app = 4;
   */
  app = "";

  /**
   * @generated from field: string ver = 5;
   */
  ver = "";

  /**
   * @generated from field: string identify = 6;
   */
  identify = "";

  /**
   * @generated from field: map<string, string> mode = 7;
   */
  mode: { [key: string]: string } = {};

  /**
   * @generated from field: string ip = 8;
   */
  ip = "";

  constructor(data?: PartialMessage<SignUpRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ac.v1.SignUpRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "mac", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "app", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "ver", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "identify", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "mode", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 8, name: "ip", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignUpRequest {
    return new SignUpRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignUpRequest {
    return new SignUpRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignUpRequest {
    return new SignUpRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SignUpRequest | PlainMessage<SignUpRequest> | undefined, b: SignUpRequest | PlainMessage<SignUpRequest> | undefined): boolean {
    return proto3.util.equals(SignUpRequest, a, b);
  }
}

/**
 * @generated from message api.ac.v1.SignUpResponse
 */
export class SignUpResponse extends Message<SignUpResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: int32 error_code = 5;
   */
  errorCode = 0;

  /**
   * @generated from field: string account_id = 6;
   */
  accountId = "";

  constructor(data?: PartialMessage<SignUpResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ac.v1.SignUpResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "error_code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignUpResponse {
    return new SignUpResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignUpResponse {
    return new SignUpResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignUpResponse {
    return new SignUpResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SignUpResponse | PlainMessage<SignUpResponse> | undefined, b: SignUpResponse | PlainMessage<SignUpResponse> | undefined): boolean {
    return proto3.util.equals(SignUpResponse, a, b);
  }
}

/**
 * @generated from message api.ac.v1.QueryDeviceByMacChipRequest
 */
export class QueryDeviceByMacChipRequest extends Message<QueryDeviceByMacChipRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: string mac = 3;
   */
  mac = "";

  /**
   * @generated from field: string app = 4;
   */
  app = "";

  /**
   * @generated from field: string ver = 5;
   */
  ver = "";

  /**
   * @generated from field: string identify = 6;
   */
  identify = "";

  /**
   * @generated from field: string ip = 7;
   */
  ip = "";

  constructor(data?: PartialMessage<QueryDeviceByMacChipRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ac.v1.QueryDeviceByMacChipRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "mac", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "app", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "ver", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "identify", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "ip", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDeviceByMacChipRequest {
    return new QueryDeviceByMacChipRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDeviceByMacChipRequest {
    return new QueryDeviceByMacChipRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDeviceByMacChipRequest {
    return new QueryDeviceByMacChipRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDeviceByMacChipRequest | PlainMessage<QueryDeviceByMacChipRequest> | undefined, b: QueryDeviceByMacChipRequest | PlainMessage<QueryDeviceByMacChipRequest> | undefined): boolean {
    return proto3.util.equals(QueryDeviceByMacChipRequest, a, b);
  }
}

/**
 * @generated from message api.ac.v1.QueryDeviceByMacChipResponse
 */
export class QueryDeviceByMacChipResponse extends Message<QueryDeviceByMacChipResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: int32 error_code = 5;
   */
  errorCode = 0;

  /**
   * @generated from field: api.ac.v1.Device device = 6;
   */
  device?: Device;

  constructor(data?: PartialMessage<QueryDeviceByMacChipResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ac.v1.QueryDeviceByMacChipResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "error_code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "device", kind: "message", T: Device },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDeviceByMacChipResponse {
    return new QueryDeviceByMacChipResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDeviceByMacChipResponse {
    return new QueryDeviceByMacChipResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDeviceByMacChipResponse {
    return new QueryDeviceByMacChipResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDeviceByMacChipResponse | PlainMessage<QueryDeviceByMacChipResponse> | undefined, b: QueryDeviceByMacChipResponse | PlainMessage<QueryDeviceByMacChipResponse> | undefined): boolean {
    return proto3.util.equals(QueryDeviceByMacChipResponse, a, b);
  }
}

