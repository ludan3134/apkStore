// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file api/ac/v1/acm.proto (package api.ac.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Account
 *
 * @generated from message api.ac.v1.Account
 */
export class Account extends Message<Account> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * 用户名
   *
   * @generated from field: string username = 2;
   */
  username = "";

  /**
   * 密码
   *
   * @generated from field: string password = 3;
   */
  password = "";

  /**
   * 账号类型 默认1
   *
   * @generated from field: int32 account_type = 4;
   */
  accountType = 0;

  /**
   * 账号状态
   *
   * @generated from field: int32 account_status = 5;
   */
  accountStatus = 0;

  /**
   * 账号级别
   *
   * @generated from field: int32 level = 6;
   */
  level = 0;

  /**
   * 备注
   *
   * @generated from field: string remark = 7;
   */
  remark = "";

  /**
   * 创建时间
   *
   * @generated from field: int32 created = 8;
   */
  created = 0;

  /**
   * 更新时间
   *
   * @generated from field: int32 updated = 9;
   */
  updated = 0;

  /**
   * 是否删除
   *
   * @generated from field: bool deleted = 10;
   */
  deleted = false;

  constructor(data?: PartialMessage<Account>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ac.v1.Account";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "account_type", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "account_status", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "level", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "remark", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "created", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "updated", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "deleted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Account {
    return new Account().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Account {
    return new Account().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Account {
    return new Account().fromJsonString(jsonString, options);
  }

  static equals(a: Account | PlainMessage<Account> | undefined, b: Account | PlainMessage<Account> | undefined): boolean {
    return proto3.util.equals(Account, a, b);
  }
}

/**
 * Device
 *
 * @generated from message api.ac.v1.Device
 */
export class Device extends Message<Device> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string account_id = 2;
   */
  accountId = "";

  /**
   * 设备名称
   *
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * mac地址
   *
   * @generated from field: string mac = 4;
   */
  mac = "";

  /**
   * 设备唯一标识 ，如chip
   *
   * @generated from field: string identify = 5;
   */
  identify = "";

  /**
   * 设备类型 默认1
   *
   * @generated from field: int32 device_type = 6;
   */
  deviceType = 0;

  /**
   * 设备状态
   *
   * @generated from field: int32 device_status = 7;
   */
  deviceStatus = 0;

  /**
   * 最新登录ip
   *
   * @generated from field: string last_login_ip = 8;
   */
  lastLoginIp = "";

  /**
   * 最新登录时间
   *
   * @generated from field: int32 last_login_time = 9;
   */
  lastLoginTime = 0;

  /**
   * 备注
   *
   * @generated from field: string remark = 10;
   */
  remark = "";

  /**
   * 创建时间
   *
   * @generated from field: int32 created = 11;
   */
  created = 0;

  /**
   * 更新时间
   *
   * @generated from field: int32 updated = 12;
   */
  updated = 0;

  /**
   * 是否删除
   *
   * @generated from field: bool deleted = 13;
   */
  deleted = false;

  constructor(data?: PartialMessage<Device>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ac.v1.Device";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "mac", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "identify", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "device_type", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "device_status", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "last_login_ip", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "last_login_time", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "remark", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "created", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 12, name: "updated", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 13, name: "deleted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Device {
    return new Device().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Device {
    return new Device().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Device {
    return new Device().fromJsonString(jsonString, options);
  }

  static equals(a: Device | PlainMessage<Device> | undefined, b: Device | PlainMessage<Device> | undefined): boolean {
    return proto3.util.equals(Device, a, b);
  }
}

/**
 * RechargeCardBatch
 *
 * @generated from message api.ac.v1.RechargeCardBatch
 */
export class RechargeCardBatch extends Message<RechargeCardBatch> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * 关联套餐
   *
   * @generated from field: int32 combo_id = 2;
   */
  comboId = 0;

  /**
   * 续费时长
   *
   * @generated from field: string duration = 3;
   */
  duration = "";

  /**
   * 数量
   *
   * @generated from field: int32 card_count = 4;
   */
  cardCount = 0;

  /**
   * 批次类型  默认1
   *
   * @generated from field: int32 batch_type = 5;
   */
  batchType = 0;

  /**
   * 备注
   *
   * @generated from field: string remark = 6;
   */
  remark = "";

  /**
   * 创建时间
   *
   * @generated from field: int32 created = 7;
   */
  created = 0;

  /**
   * 更新时间
   *
   * @generated from field: int32 updated = 8;
   */
  updated = 0;

  /**
   * 是否删除
   *
   * @generated from field: bool deleted = 9;
   */
  deleted = false;

  constructor(data?: PartialMessage<RechargeCardBatch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ac.v1.RechargeCardBatch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "combo_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "duration", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "card_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "batch_type", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "remark", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "created", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "updated", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "deleted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RechargeCardBatch {
    return new RechargeCardBatch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RechargeCardBatch {
    return new RechargeCardBatch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RechargeCardBatch {
    return new RechargeCardBatch().fromJsonString(jsonString, options);
  }

  static equals(a: RechargeCardBatch | PlainMessage<RechargeCardBatch> | undefined, b: RechargeCardBatch | PlainMessage<RechargeCardBatch> | undefined): boolean {
    return proto3.util.equals(RechargeCardBatch, a, b);
  }
}

/**
 * RechargeCard
 *
 * @generated from message api.ac.v1.RechargeCard
 */
export class RechargeCard extends Message<RechargeCard> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * 批次id
   *
   * @generated from field: int32 batch_id = 2;
   */
  batchId = 0;

  /**
   * 卡号
   *
   * @generated from field: string card_number = 3;
   */
  cardNumber = "";

  /**
   * 卡密
   *
   * @generated from field: string card_secret = 4;
   */
  cardSecret = "";

  /**
   * 续费时长
   *
   * @generated from field: string duration = 5;
   */
  duration = "";

  /**
   * 关联套餐
   *
   * @generated from field: int32 combo_id = 6;
   */
  comboId = 0;

  /**
   * 谁使用
   *
   * @generated from field: string who_use = 7;
   */
  whoUse = "";

  /**
   * 激活时间
   *
   * @generated from field: int32 active_time = 8;
   */
  activeTime = 0;

  /**
   * 是否使用  0 未使用 1已核销
   *
   * @generated from field: int32 is_valid = 9;
   */
  isValid = 0;

  /**
   * 充值卡类型 默认1
   *
   * @generated from field: int32 card_type = 10;
   */
  cardType = 0;

  /**
   * 备注
   *
   * @generated from field: string remark = 11;
   */
  remark = "";

  /**
   * 创建时间
   *
   * @generated from field: int32 created = 12;
   */
  created = 0;

  /**
   * 更新时间
   *
   * @generated from field: int32 updated = 13;
   */
  updated = 0;

  /**
   * 是否删除
   *
   * @generated from field: bool deleted = 14;
   */
  deleted = false;

  constructor(data?: PartialMessage<RechargeCard>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ac.v1.RechargeCard";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "batch_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "card_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "card_secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "duration", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "combo_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "who_use", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "active_time", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "is_valid", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "card_type", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 11, name: "remark", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "created", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 13, name: "updated", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 14, name: "deleted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RechargeCard {
    return new RechargeCard().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RechargeCard {
    return new RechargeCard().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RechargeCard {
    return new RechargeCard().fromJsonString(jsonString, options);
  }

  static equals(a: RechargeCard | PlainMessage<RechargeCard> | undefined, b: RechargeCard | PlainMessage<RechargeCard> | undefined): boolean {
    return proto3.util.equals(RechargeCard, a, b);
  }
}

