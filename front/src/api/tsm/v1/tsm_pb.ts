// a3 服务采用的模型, 清除所有不必要字段

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file api/tsm/v1/tsm.proto (package api.tsm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * *
 * create table tts.phrase
 * (
 * id bigint default tts.snow_id(11) not null
 * constraint ip_limit_id_pk primary key,
 * phrase text not null default 'hello, anna',
 * language varchar(64) default 'en',
 * apk_type varchar(255) not null default 'all',
 * is_active bool default false,
 * updated_at timestamp default now() );
 *
 * @generated from message api.tsm.v1.Phrase
 */
export class Phrase extends Message<Phrase> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string phrase = 2;
   */
  phrase = "";

  /**
   * @generated from field: string language = 3;
   */
  language = "";

  /**
   * @generated from field: string apk_type = 4;
   */
  apkType = "";

  /**
   * @generated from field: bool is_active = 5;
   */
  isActive = false;

  /**
   * @generated from field: string updated_at = 6;
   */
  updatedAt = "";

  constructor(data?: PartialMessage<Phrase>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.tsm.v1.Phrase";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "phrase", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "apk_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "updated_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Phrase {
    return new Phrase().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Phrase {
    return new Phrase().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Phrase {
    return new Phrase().fromJsonString(jsonString, options);
  }

  static equals(a: Phrase | PlainMessage<Phrase> | undefined, b: Phrase | PlainMessage<Phrase> | undefined): boolean {
    return proto3.util.equals(Phrase, a, b);
  }
}

/**
 * @generated from message api.tsm.v1.Account
 */
export class Account extends Message<Account> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: int64 lot_id = 2;
   */
  lotId = protoInt64.zero;

  /**
   * @generated from field: int32 active_days = 3;
   */
  activeDays = 0;

  /**
   * @generated from field: bool is_active = 4;
   */
  isActive = false;

  /**
   * @generated from field: bool is_service = 5;
   */
  isService = false;

  /**
   * @generated from field: string mac_string = 6;
   */
  macString = "";

  /**
   * @generated from field: string chip_identity = 7;
   */
  chipIdentity = "";

  /**
   * @generated from field: string apk_type = 8;
   */
  apkType = "";

  /**
   * @generated from field: string updated_at = 9;
   */
  updatedAt = "";

  constructor(data?: PartialMessage<Account>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.tsm.v1.Account";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "lot_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "active_days", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "is_service", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "mac_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "chip_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "apk_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "updated_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Account {
    return new Account().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Account {
    return new Account().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Account {
    return new Account().fromJsonString(jsonString, options);
  }

  static equals(a: Account | PlainMessage<Account> | undefined, b: Account | PlainMessage<Account> | undefined): boolean {
    return proto3.util.equals(Account, a, b);
  }
}

/**
 * @generated from message api.tsm.v1.IpLimit
 */
export class IpLimit extends Message<IpLimit> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: uint32 ip_address = 2;
   */
  ipAddress = 0;

  /**
   * @generated from field: int32 limit_type = 3;
   */
  limitType = 0;

  /**
   * @generated from field: string ip_string = 4;
   */
  ipString = "";

  /**
   * @generated from field: string apk_type = 5;
   */
  apkType = "";

  constructor(data?: PartialMessage<IpLimit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.tsm.v1.IpLimit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "ip_address", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "limit_type", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "ip_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "apk_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IpLimit {
    return new IpLimit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IpLimit {
    return new IpLimit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IpLimit {
    return new IpLimit().fromJsonString(jsonString, options);
  }

  static equals(a: IpLimit | PlainMessage<IpLimit> | undefined, b: IpLimit | PlainMessage<IpLimit> | undefined): boolean {
    return proto3.util.equals(IpLimit, a, b);
  }
}

