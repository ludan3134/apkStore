// as 服务, 即是 a3 的 grpc 服务

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file api/qs/v1/qs.proto (package api.qs.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { TestingFilter, TestingRecord } from "../../psm/v1/psm_pb.ts";
import { PageMeta } from "../../com/v1/pagemeta_pb.ts";

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.qs.v1.CountTestingRequest
 */
export class CountTestingRequest extends Message<CountTestingRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  constructor(data?: PartialMessage<CountTestingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.qs.v1.CountTestingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountTestingRequest {
    return new CountTestingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountTestingRequest {
    return new CountTestingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountTestingRequest {
    return new CountTestingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CountTestingRequest | PlainMessage<CountTestingRequest> | undefined, b: CountTestingRequest | PlainMessage<CountTestingRequest> | undefined): boolean {
    return proto3.util.equals(CountTestingRequest, a, b);
  }
}

/**
 * @generated from message api.qs.v1.CountTestingResponse
 */
export class CountTestingResponse extends Message<CountTestingResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: int32 total = 5;
   */
  total = 0;

  constructor(data?: PartialMessage<CountTestingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.qs.v1.CountTestingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "total", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountTestingResponse {
    return new CountTestingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountTestingResponse {
    return new CountTestingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountTestingResponse {
    return new CountTestingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CountTestingResponse | PlainMessage<CountTestingResponse> | undefined, b: CountTestingResponse | PlainMessage<CountTestingResponse> | undefined): boolean {
    return proto3.util.equals(CountTestingResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.qs.v1.CountTestingByFilterRequest
 */
export class CountTestingByFilterRequest extends Message<CountTestingByFilterRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: api.psm.v1.TestingFilter filter = 3;
   */
  filter?: TestingFilter;

  constructor(data?: PartialMessage<CountTestingByFilterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.qs.v1.CountTestingByFilterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "filter", kind: "message", T: TestingFilter },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountTestingByFilterRequest {
    return new CountTestingByFilterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountTestingByFilterRequest {
    return new CountTestingByFilterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountTestingByFilterRequest {
    return new CountTestingByFilterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CountTestingByFilterRequest | PlainMessage<CountTestingByFilterRequest> | undefined, b: CountTestingByFilterRequest | PlainMessage<CountTestingByFilterRequest> | undefined): boolean {
    return proto3.util.equals(CountTestingByFilterRequest, a, b);
  }
}

/**
 * @generated from message api.qs.v1.CountTestingByFilterResponse
 */
export class CountTestingByFilterResponse extends Message<CountTestingByFilterResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: int32 total = 5;
   */
  total = 0;

  /**
   * @generated from field: api.psm.v1.TestingFilter filter = 6;
   */
  filter?: TestingFilter;

  constructor(data?: PartialMessage<CountTestingByFilterResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.qs.v1.CountTestingByFilterResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "total", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "filter", kind: "message", T: TestingFilter },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountTestingByFilterResponse {
    return new CountTestingByFilterResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountTestingByFilterResponse {
    return new CountTestingByFilterResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountTestingByFilterResponse {
    return new CountTestingByFilterResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CountTestingByFilterResponse | PlainMessage<CountTestingByFilterResponse> | undefined, b: CountTestingByFilterResponse | PlainMessage<CountTestingByFilterResponse> | undefined): boolean {
    return proto3.util.equals(CountTestingByFilterResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.qs.v1.UpsertTestingRecordListRequest
 */
export class UpsertTestingRecordListRequest extends Message<UpsertTestingRecordListRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: repeated api.psm.v1.TestingRecord testing_record_list = 4;
   */
  testingRecordList: TestingRecord[] = [];

  constructor(data?: PartialMessage<UpsertTestingRecordListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.qs.v1.UpsertTestingRecordListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "testing_record_list", kind: "message", T: TestingRecord, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertTestingRecordListRequest {
    return new UpsertTestingRecordListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertTestingRecordListRequest {
    return new UpsertTestingRecordListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertTestingRecordListRequest {
    return new UpsertTestingRecordListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertTestingRecordListRequest | PlainMessage<UpsertTestingRecordListRequest> | undefined, b: UpsertTestingRecordListRequest | PlainMessage<UpsertTestingRecordListRequest> | undefined): boolean {
    return proto3.util.equals(UpsertTestingRecordListRequest, a, b);
  }
}

/**
 * @generated from message api.qs.v1.UpsertTestingRecordListResponse
 */
export class UpsertTestingRecordListResponse extends Message<UpsertTestingRecordListResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: repeated api.psm.v1.TestingRecord testing_record_list = 5;
   */
  testingRecordList: TestingRecord[] = [];

  constructor(data?: PartialMessage<UpsertTestingRecordListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.qs.v1.UpsertTestingRecordListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "testing_record_list", kind: "message", T: TestingRecord, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertTestingRecordListResponse {
    return new UpsertTestingRecordListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertTestingRecordListResponse {
    return new UpsertTestingRecordListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertTestingRecordListResponse {
    return new UpsertTestingRecordListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertTestingRecordListResponse | PlainMessage<UpsertTestingRecordListResponse> | undefined, b: UpsertTestingRecordListResponse | PlainMessage<UpsertTestingRecordListResponse> | undefined): boolean {
    return proto3.util.equals(UpsertTestingRecordListResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.qs.v1.QueryTestingListRequest
 */
export class QueryTestingListRequest extends Message<QueryTestingListRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 lot_id = 4;
   */
  lotId = protoInt64.zero;

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 5;
   */
  pageMeta?: PageMeta;

  constructor(data?: PartialMessage<QueryTestingListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.qs.v1.QueryTestingListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "lot_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "page_meta", kind: "message", T: PageMeta },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTestingListRequest {
    return new QueryTestingListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTestingListRequest {
    return new QueryTestingListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTestingListRequest {
    return new QueryTestingListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTestingListRequest | PlainMessage<QueryTestingListRequest> | undefined, b: QueryTestingListRequest | PlainMessage<QueryTestingListRequest> | undefined): boolean {
    return proto3.util.equals(QueryTestingListRequest, a, b);
  }
}

/**
 * @generated from message api.qs.v1.QueryTestingListResponse
 */
export class QueryTestingListResponse extends Message<QueryTestingListResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: int64 crating_setting_id = 4;
   */
  cratingSettingId = protoInt64.zero;

  /**
   * @generated from field: string message = 5;
   */
  message = "";

  /**
   * @generated from field: int64 lot_id = 6;
   */
  lotId = protoInt64.zero;

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 7;
   */
  pageMeta?: PageMeta;

  /**
   * @generated from field: repeated api.psm.v1.TestingRecord testing_record_list = 8;
   */
  testingRecordList: TestingRecord[] = [];

  constructor(data?: PartialMessage<QueryTestingListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.qs.v1.QueryTestingListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "crating_setting_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "lot_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "page_meta", kind: "message", T: PageMeta },
    { no: 8, name: "testing_record_list", kind: "message", T: TestingRecord, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTestingListResponse {
    return new QueryTestingListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTestingListResponse {
    return new QueryTestingListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTestingListResponse {
    return new QueryTestingListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTestingListResponse | PlainMessage<QueryTestingListResponse> | undefined, b: QueryTestingListResponse | PlainMessage<QueryTestingListResponse> | undefined): boolean {
    return proto3.util.equals(QueryTestingListResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.qs.v1.QueryTestingListByFilterRequest
 */
export class QueryTestingListByFilterRequest extends Message<QueryTestingListByFilterRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: api.psm.v1.TestingFilter filter = 3;
   */
  filter?: TestingFilter;

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 4;
   */
  pageMeta?: PageMeta;

  constructor(data?: PartialMessage<QueryTestingListByFilterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.qs.v1.QueryTestingListByFilterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "filter", kind: "message", T: TestingFilter },
    { no: 4, name: "page_meta", kind: "message", T: PageMeta },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTestingListByFilterRequest {
    return new QueryTestingListByFilterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTestingListByFilterRequest {
    return new QueryTestingListByFilterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTestingListByFilterRequest {
    return new QueryTestingListByFilterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTestingListByFilterRequest | PlainMessage<QueryTestingListByFilterRequest> | undefined, b: QueryTestingListByFilterRequest | PlainMessage<QueryTestingListByFilterRequest> | undefined): boolean {
    return proto3.util.equals(QueryTestingListByFilterRequest, a, b);
  }
}

/**
 * @generated from message api.qs.v1.QueryTestingListByFilterResponse
 */
export class QueryTestingListByFilterResponse extends Message<QueryTestingListByFilterResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: api.psm.v1.TestingFilter filter = 5;
   */
  filter?: TestingFilter;

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 6;
   */
  pageMeta?: PageMeta;

  /**
   * @generated from field: repeated api.psm.v1.TestingRecord testing_record_list = 7;
   */
  testingRecordList: TestingRecord[] = [];

  constructor(data?: PartialMessage<QueryTestingListByFilterResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.qs.v1.QueryTestingListByFilterResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "filter", kind: "message", T: TestingFilter },
    { no: 6, name: "page_meta", kind: "message", T: PageMeta },
    { no: 7, name: "testing_record_list", kind: "message", T: TestingRecord, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTestingListByFilterResponse {
    return new QueryTestingListByFilterResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTestingListByFilterResponse {
    return new QueryTestingListByFilterResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTestingListByFilterResponse {
    return new QueryTestingListByFilterResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTestingListByFilterResponse | PlainMessage<QueryTestingListByFilterResponse> | undefined, b: QueryTestingListByFilterResponse | PlainMessage<QueryTestingListByFilterResponse> | undefined): boolean {
    return proto3.util.equals(QueryTestingListByFilterResponse, a, b);
  }
}

