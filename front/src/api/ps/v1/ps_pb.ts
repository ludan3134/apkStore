// as 服务, 即是 a3 的 grpc 服务

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file api/ps/v1/ps.proto (package api.ps.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { PageMeta } from "../../com/v1/pagemeta_pb.ts";
import { Distributor, Lot, MacSerial, MacSerialSetting } from "../../psm/v1/psm_pb.ts";

/**
 * @generated from message api.ps.v1.QueryDistributorListRequest
 */
export class QueryDistributorListRequest extends Message<QueryDistributorListRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 4;
   */
  pageMeta?: PageMeta;

  constructor(data?: PartialMessage<QueryDistributorListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ps.v1.QueryDistributorListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "page_meta", kind: "message", T: PageMeta },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDistributorListRequest {
    return new QueryDistributorListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDistributorListRequest {
    return new QueryDistributorListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDistributorListRequest {
    return new QueryDistributorListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDistributorListRequest | PlainMessage<QueryDistributorListRequest> | undefined, b: QueryDistributorListRequest | PlainMessage<QueryDistributorListRequest> | undefined): boolean {
    return proto3.util.equals(QueryDistributorListRequest, a, b);
  }
}

/**
 * @generated from message api.ps.v1.QueryDistributorListResponse
 */
export class QueryDistributorListResponse extends Message<QueryDistributorListResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 5;
   */
  pageMeta?: PageMeta;

  /**
   * @generated from field: repeated api.psm.v1.Distributor distributor_list = 6;
   */
  distributorList: Distributor[] = [];

  constructor(data?: PartialMessage<QueryDistributorListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ps.v1.QueryDistributorListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "page_meta", kind: "message", T: PageMeta },
    { no: 6, name: "distributor_list", kind: "message", T: Distributor, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDistributorListResponse {
    return new QueryDistributorListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDistributorListResponse {
    return new QueryDistributorListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDistributorListResponse {
    return new QueryDistributorListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDistributorListResponse | PlainMessage<QueryDistributorListResponse> | undefined, b: QueryDistributorListResponse | PlainMessage<QueryDistributorListResponse> | undefined): boolean {
    return proto3.util.equals(QueryDistributorListResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.ps.v1.UpsertDistributorListRequest
 */
export class UpsertDistributorListRequest extends Message<UpsertDistributorListRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: repeated api.psm.v1.Distributor distributor_list = 3;
   */
  distributorList: Distributor[] = [];

  constructor(data?: PartialMessage<UpsertDistributorListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ps.v1.UpsertDistributorListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "distributor_list", kind: "message", T: Distributor, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertDistributorListRequest {
    return new UpsertDistributorListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertDistributorListRequest {
    return new UpsertDistributorListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertDistributorListRequest {
    return new UpsertDistributorListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertDistributorListRequest | PlainMessage<UpsertDistributorListRequest> | undefined, b: UpsertDistributorListRequest | PlainMessage<UpsertDistributorListRequest> | undefined): boolean {
    return proto3.util.equals(UpsertDistributorListRequest, a, b);
  }
}

/**
 * @generated from message api.ps.v1.UpsertDistributorListResponse
 */
export class UpsertDistributorListResponse extends Message<UpsertDistributorListResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: repeated api.psm.v1.Distributor distributor_list = 5;
   */
  distributorList: Distributor[] = [];

  constructor(data?: PartialMessage<UpsertDistributorListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ps.v1.UpsertDistributorListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "distributor_list", kind: "message", T: Distributor, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertDistributorListResponse {
    return new UpsertDistributorListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertDistributorListResponse {
    return new UpsertDistributorListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertDistributorListResponse {
    return new UpsertDistributorListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertDistributorListResponse | PlainMessage<UpsertDistributorListResponse> | undefined, b: UpsertDistributorListResponse | PlainMessage<UpsertDistributorListResponse> | undefined): boolean {
    return proto3.util.equals(UpsertDistributorListResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.ps.v1.UpsertLotRequest
 */
export class UpsertLotRequest extends Message<UpsertLotRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: api.psm.v1.Lot lot = 3;
   */
  lot?: Lot;

  constructor(data?: PartialMessage<UpsertLotRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ps.v1.UpsertLotRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "lot", kind: "message", T: Lot },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertLotRequest {
    return new UpsertLotRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertLotRequest {
    return new UpsertLotRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertLotRequest {
    return new UpsertLotRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertLotRequest | PlainMessage<UpsertLotRequest> | undefined, b: UpsertLotRequest | PlainMessage<UpsertLotRequest> | undefined): boolean {
    return proto3.util.equals(UpsertLotRequest, a, b);
  }
}

/**
 * @generated from message api.ps.v1.UpsertLotResponse
 */
export class UpsertLotResponse extends Message<UpsertLotResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: api.psm.v1.Lot lot = 5;
   */
  lot?: Lot;

  constructor(data?: PartialMessage<UpsertLotResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ps.v1.UpsertLotResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "lot", kind: "message", T: Lot },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertLotResponse {
    return new UpsertLotResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertLotResponse {
    return new UpsertLotResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertLotResponse {
    return new UpsertLotResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertLotResponse | PlainMessage<UpsertLotResponse> | undefined, b: UpsertLotResponse | PlainMessage<UpsertLotResponse> | undefined): boolean {
    return proto3.util.equals(UpsertLotResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.ps.v1.QueryLotListRequest
 */
export class QueryLotListRequest extends Message<QueryLotListRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 3;
   */
  pageMeta?: PageMeta;

  constructor(data?: PartialMessage<QueryLotListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ps.v1.QueryLotListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "page_meta", kind: "message", T: PageMeta },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLotListRequest {
    return new QueryLotListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLotListRequest {
    return new QueryLotListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLotListRequest {
    return new QueryLotListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLotListRequest | PlainMessage<QueryLotListRequest> | undefined, b: QueryLotListRequest | PlainMessage<QueryLotListRequest> | undefined): boolean {
    return proto3.util.equals(QueryLotListRequest, a, b);
  }
}

/**
 * @generated from message api.ps.v1.QueryLotListResponse
 */
export class QueryLotListResponse extends Message<QueryLotListResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 5;
   */
  pageMeta?: PageMeta;

  /**
   * @generated from field: repeated api.psm.v1.Lot lot_list = 6;
   */
  lotList: Lot[] = [];

  constructor(data?: PartialMessage<QueryLotListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ps.v1.QueryLotListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "page_meta", kind: "message", T: PageMeta },
    { no: 6, name: "lot_list", kind: "message", T: Lot, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLotListResponse {
    return new QueryLotListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLotListResponse {
    return new QueryLotListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLotListResponse {
    return new QueryLotListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLotListResponse | PlainMessage<QueryLotListResponse> | undefined, b: QueryLotListResponse | PlainMessage<QueryLotListResponse> | undefined): boolean {
    return proto3.util.equals(QueryLotListResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.ps.v1.QueryLotListByDistributorRequest
 */
export class QueryLotListByDistributorRequest extends Message<QueryLotListByDistributorRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 distributor_id = 3;
   */
  distributorId = protoInt64.zero;

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 4;
   */
  pageMeta?: PageMeta;

  constructor(data?: PartialMessage<QueryLotListByDistributorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ps.v1.QueryLotListByDistributorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "distributor_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "page_meta", kind: "message", T: PageMeta },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLotListByDistributorRequest {
    return new QueryLotListByDistributorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLotListByDistributorRequest {
    return new QueryLotListByDistributorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLotListByDistributorRequest {
    return new QueryLotListByDistributorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLotListByDistributorRequest | PlainMessage<QueryLotListByDistributorRequest> | undefined, b: QueryLotListByDistributorRequest | PlainMessage<QueryLotListByDistributorRequest> | undefined): boolean {
    return proto3.util.equals(QueryLotListByDistributorRequest, a, b);
  }
}

/**
 * @generated from message api.ps.v1.QueryLotListByDistributorResponse
 */
export class QueryLotListByDistributorResponse extends Message<QueryLotListByDistributorResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: int64 distributor_id = 5;
   */
  distributorId = protoInt64.zero;

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 6;
   */
  pageMeta?: PageMeta;

  /**
   * @generated from field: repeated api.psm.v1.Lot lot_list = 7;
   */
  lotList: Lot[] = [];

  constructor(data?: PartialMessage<QueryLotListByDistributorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ps.v1.QueryLotListByDistributorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "distributor_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "page_meta", kind: "message", T: PageMeta },
    { no: 7, name: "lot_list", kind: "message", T: Lot, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLotListByDistributorResponse {
    return new QueryLotListByDistributorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLotListByDistributorResponse {
    return new QueryLotListByDistributorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLotListByDistributorResponse {
    return new QueryLotListByDistributorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLotListByDistributorResponse | PlainMessage<QueryLotListByDistributorResponse> | undefined, b: QueryLotListByDistributorResponse | PlainMessage<QueryLotListByDistributorResponse> | undefined): boolean {
    return proto3.util.equals(QueryLotListByDistributorResponse, a, b);
  }
}

/**
 * @generated from message api.ps.v1.CountDistributorRequest
 */
export class CountDistributorRequest extends Message<CountDistributorRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  constructor(data?: PartialMessage<CountDistributorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ps.v1.CountDistributorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountDistributorRequest {
    return new CountDistributorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountDistributorRequest {
    return new CountDistributorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountDistributorRequest {
    return new CountDistributorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CountDistributorRequest | PlainMessage<CountDistributorRequest> | undefined, b: CountDistributorRequest | PlainMessage<CountDistributorRequest> | undefined): boolean {
    return proto3.util.equals(CountDistributorRequest, a, b);
  }
}

/**
 * @generated from message api.ps.v1.CountDistributorResponse
 */
export class CountDistributorResponse extends Message<CountDistributorResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: int32 total = 5;
   */
  total = 0;

  constructor(data?: PartialMessage<CountDistributorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ps.v1.CountDistributorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "total", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountDistributorResponse {
    return new CountDistributorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountDistributorResponse {
    return new CountDistributorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountDistributorResponse {
    return new CountDistributorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CountDistributorResponse | PlainMessage<CountDistributorResponse> | undefined, b: CountDistributorResponse | PlainMessage<CountDistributorResponse> | undefined): boolean {
    return proto3.util.equals(CountDistributorResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.ps.v1.CountLotRequest
 */
export class CountLotRequest extends Message<CountLotRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  constructor(data?: PartialMessage<CountLotRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ps.v1.CountLotRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountLotRequest {
    return new CountLotRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountLotRequest {
    return new CountLotRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountLotRequest {
    return new CountLotRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CountLotRequest | PlainMessage<CountLotRequest> | undefined, b: CountLotRequest | PlainMessage<CountLotRequest> | undefined): boolean {
    return proto3.util.equals(CountLotRequest, a, b);
  }
}

/**
 * @generated from message api.ps.v1.CountLotResponse
 */
export class CountLotResponse extends Message<CountLotResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: int32 total = 5;
   */
  total = 0;

  constructor(data?: PartialMessage<CountLotResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ps.v1.CountLotResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "total", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountLotResponse {
    return new CountLotResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountLotResponse {
    return new CountLotResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountLotResponse {
    return new CountLotResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CountLotResponse | PlainMessage<CountLotResponse> | undefined, b: CountLotResponse | PlainMessage<CountLotResponse> | undefined): boolean {
    return proto3.util.equals(CountLotResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.ps.v1.CountLotByDistributorRequest
 */
export class CountLotByDistributorRequest extends Message<CountLotByDistributorRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 distributor_id = 3;
   */
  distributorId = protoInt64.zero;

  constructor(data?: PartialMessage<CountLotByDistributorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ps.v1.CountLotByDistributorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "distributor_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountLotByDistributorRequest {
    return new CountLotByDistributorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountLotByDistributorRequest {
    return new CountLotByDistributorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountLotByDistributorRequest {
    return new CountLotByDistributorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CountLotByDistributorRequest | PlainMessage<CountLotByDistributorRequest> | undefined, b: CountLotByDistributorRequest | PlainMessage<CountLotByDistributorRequest> | undefined): boolean {
    return proto3.util.equals(CountLotByDistributorRequest, a, b);
  }
}

/**
 * @generated from message api.ps.v1.CountLotByDistributorResponse
 */
export class CountLotByDistributorResponse extends Message<CountLotByDistributorResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: int64 distributor_id = 5;
   */
  distributorId = protoInt64.zero;

  /**
   * @generated from field: int32 total = 6;
   */
  total = 0;

  constructor(data?: PartialMessage<CountLotByDistributorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ps.v1.CountLotByDistributorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "distributor_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "total", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountLotByDistributorResponse {
    return new CountLotByDistributorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountLotByDistributorResponse {
    return new CountLotByDistributorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountLotByDistributorResponse {
    return new CountLotByDistributorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CountLotByDistributorResponse | PlainMessage<CountLotByDistributorResponse> | undefined, b: CountLotByDistributorResponse | PlainMessage<CountLotByDistributorResponse> | undefined): boolean {
    return proto3.util.equals(CountLotByDistributorResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.ps.v1.CountMacSerialRequest
 */
export class CountMacSerialRequest extends Message<CountMacSerialRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * lot_id 为0 时, 查询所有的
   *
   * @generated from field: int64 lot_id = 3;
   */
  lotId = protoInt64.zero;

  /**
   * setting_id 为0 时, 查询所有的
   *
   * @generated from field: int64 setting_id = 4;
   */
  settingId = protoInt64.zero;

  constructor(data?: PartialMessage<CountMacSerialRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ps.v1.CountMacSerialRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "lot_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "setting_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountMacSerialRequest {
    return new CountMacSerialRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountMacSerialRequest {
    return new CountMacSerialRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountMacSerialRequest {
    return new CountMacSerialRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CountMacSerialRequest | PlainMessage<CountMacSerialRequest> | undefined, b: CountMacSerialRequest | PlainMessage<CountMacSerialRequest> | undefined): boolean {
    return proto3.util.equals(CountMacSerialRequest, a, b);
  }
}

/**
 * @generated from message api.ps.v1.CountMacSerialResponse
 */
export class CountMacSerialResponse extends Message<CountMacSerialResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: int64 lot_id = 5;
   */
  lotId = protoInt64.zero;

  /**
   * @generated from field: int64 setting_id = 6;
   */
  settingId = protoInt64.zero;

  /**
   * @generated from field: int32 total = 7;
   */
  total = 0;

  constructor(data?: PartialMessage<CountMacSerialResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ps.v1.CountMacSerialResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "lot_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "setting_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "total", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountMacSerialResponse {
    return new CountMacSerialResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountMacSerialResponse {
    return new CountMacSerialResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountMacSerialResponse {
    return new CountMacSerialResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CountMacSerialResponse | PlainMessage<CountMacSerialResponse> | undefined, b: CountMacSerialResponse | PlainMessage<CountMacSerialResponse> | undefined): boolean {
    return proto3.util.equals(CountMacSerialResponse, a, b);
  }
}

/**
 * @generated from message api.ps.v1.CountMacSerialSettingRequest
 */
export class CountMacSerialSettingRequest extends Message<CountMacSerialSettingRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 lot_id = 3;
   */
  lotId = protoInt64.zero;

  constructor(data?: PartialMessage<CountMacSerialSettingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ps.v1.CountMacSerialSettingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "lot_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountMacSerialSettingRequest {
    return new CountMacSerialSettingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountMacSerialSettingRequest {
    return new CountMacSerialSettingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountMacSerialSettingRequest {
    return new CountMacSerialSettingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CountMacSerialSettingRequest | PlainMessage<CountMacSerialSettingRequest> | undefined, b: CountMacSerialSettingRequest | PlainMessage<CountMacSerialSettingRequest> | undefined): boolean {
    return proto3.util.equals(CountMacSerialSettingRequest, a, b);
  }
}

/**
 * @generated from message api.ps.v1.CountMacSerialSettingResponse
 */
export class CountMacSerialSettingResponse extends Message<CountMacSerialSettingResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: int64 lot_id = 4;
   */
  lotId = protoInt64.zero;

  /**
   * @generated from field: string message = 5;
   */
  message = "";

  /**
   * @generated from field: int32 total = 6;
   */
  total = 0;

  constructor(data?: PartialMessage<CountMacSerialSettingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ps.v1.CountMacSerialSettingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "lot_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "total", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountMacSerialSettingResponse {
    return new CountMacSerialSettingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountMacSerialSettingResponse {
    return new CountMacSerialSettingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountMacSerialSettingResponse {
    return new CountMacSerialSettingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CountMacSerialSettingResponse | PlainMessage<CountMacSerialSettingResponse> | undefined, b: CountMacSerialSettingResponse | PlainMessage<CountMacSerialSettingResponse> | undefined): boolean {
    return proto3.util.equals(CountMacSerialSettingResponse, a, b);
  }
}

/**
 * @generated from message api.ps.v1.PingRequest
 */
export class PingRequest extends Message<PingRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: string message = 3;
   */
  message = "";

  constructor(data?: PartialMessage<PingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ps.v1.PingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingRequest {
    return new PingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingRequest {
    return new PingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingRequest {
    return new PingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PingRequest | PlainMessage<PingRequest> | undefined, b: PingRequest | PlainMessage<PingRequest> | undefined): boolean {
    return proto3.util.equals(PingRequest, a, b);
  }
}

/**
 * @generated from message api.ps.v1.PingResponse
 */
export class PingResponse extends Message<PingResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  constructor(data?: PartialMessage<PingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ps.v1.PingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingResponse {
    return new PingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingResponse {
    return new PingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingResponse {
    return new PingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PingResponse | PlainMessage<PingResponse> | undefined, b: PingResponse | PlainMessage<PingResponse> | undefined): boolean {
    return proto3.util.equals(PingResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.ps.v1.UpsertMacSerialSettingRequest
 */
export class UpsertMacSerialSettingRequest extends Message<UpsertMacSerialSettingRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: api.psm.v1.MacSerialSetting mac_serial_setting = 3;
   */
  macSerialSetting?: MacSerialSetting;

  constructor(data?: PartialMessage<UpsertMacSerialSettingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ps.v1.UpsertMacSerialSettingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "mac_serial_setting", kind: "message", T: MacSerialSetting },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertMacSerialSettingRequest {
    return new UpsertMacSerialSettingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertMacSerialSettingRequest {
    return new UpsertMacSerialSettingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertMacSerialSettingRequest {
    return new UpsertMacSerialSettingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertMacSerialSettingRequest | PlainMessage<UpsertMacSerialSettingRequest> | undefined, b: UpsertMacSerialSettingRequest | PlainMessage<UpsertMacSerialSettingRequest> | undefined): boolean {
    return proto3.util.equals(UpsertMacSerialSettingRequest, a, b);
  }
}

/**
 * @generated from message api.ps.v1.UpsertMacSerialSettingResponse
 */
export class UpsertMacSerialSettingResponse extends Message<UpsertMacSerialSettingResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: api.psm.v1.MacSerialSetting mac_serial_setting = 5;
   */
  macSerialSetting?: MacSerialSetting;

  constructor(data?: PartialMessage<UpsertMacSerialSettingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ps.v1.UpsertMacSerialSettingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "mac_serial_setting", kind: "message", T: MacSerialSetting },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertMacSerialSettingResponse {
    return new UpsertMacSerialSettingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertMacSerialSettingResponse {
    return new UpsertMacSerialSettingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertMacSerialSettingResponse {
    return new UpsertMacSerialSettingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertMacSerialSettingResponse | PlainMessage<UpsertMacSerialSettingResponse> | undefined, b: UpsertMacSerialSettingResponse | PlainMessage<UpsertMacSerialSettingResponse> | undefined): boolean {
    return proto3.util.equals(UpsertMacSerialSettingResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.ps.v1.QueryMacSerialSettingListRequest
 */
export class QueryMacSerialSettingListRequest extends Message<QueryMacSerialSettingListRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 lot_id = 3;
   */
  lotId = protoInt64.zero;

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 4;
   */
  pageMeta?: PageMeta;

  constructor(data?: PartialMessage<QueryMacSerialSettingListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ps.v1.QueryMacSerialSettingListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "lot_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "page_meta", kind: "message", T: PageMeta },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryMacSerialSettingListRequest {
    return new QueryMacSerialSettingListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryMacSerialSettingListRequest {
    return new QueryMacSerialSettingListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryMacSerialSettingListRequest {
    return new QueryMacSerialSettingListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryMacSerialSettingListRequest | PlainMessage<QueryMacSerialSettingListRequest> | undefined, b: QueryMacSerialSettingListRequest | PlainMessage<QueryMacSerialSettingListRequest> | undefined): boolean {
    return proto3.util.equals(QueryMacSerialSettingListRequest, a, b);
  }
}

/**
 * @generated from message api.ps.v1.QueryMacSerialSettingListResponse
 */
export class QueryMacSerialSettingListResponse extends Message<QueryMacSerialSettingListResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: int64 lot_id = 5;
   */
  lotId = protoInt64.zero;

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 6;
   */
  pageMeta?: PageMeta;

  /**
   * @generated from field: repeated api.psm.v1.MacSerialSetting mac_serial_setting_list = 7;
   */
  macSerialSettingList: MacSerialSetting[] = [];

  constructor(data?: PartialMessage<QueryMacSerialSettingListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ps.v1.QueryMacSerialSettingListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "lot_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "page_meta", kind: "message", T: PageMeta },
    { no: 7, name: "mac_serial_setting_list", kind: "message", T: MacSerialSetting, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryMacSerialSettingListResponse {
    return new QueryMacSerialSettingListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryMacSerialSettingListResponse {
    return new QueryMacSerialSettingListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryMacSerialSettingListResponse {
    return new QueryMacSerialSettingListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryMacSerialSettingListResponse | PlainMessage<QueryMacSerialSettingListResponse> | undefined, b: QueryMacSerialSettingListResponse | PlainMessage<QueryMacSerialSettingListResponse> | undefined): boolean {
    return proto3.util.equals(QueryMacSerialSettingListResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.ps.v1.QueryMacSerialListRequest
 */
export class QueryMacSerialListRequest extends Message<QueryMacSerialListRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 setting_id = 3;
   */
  settingId = protoInt64.zero;

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 4;
   */
  pageMeta?: PageMeta;

  constructor(data?: PartialMessage<QueryMacSerialListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ps.v1.QueryMacSerialListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "setting_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "page_meta", kind: "message", T: PageMeta },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryMacSerialListRequest {
    return new QueryMacSerialListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryMacSerialListRequest {
    return new QueryMacSerialListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryMacSerialListRequest {
    return new QueryMacSerialListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryMacSerialListRequest | PlainMessage<QueryMacSerialListRequest> | undefined, b: QueryMacSerialListRequest | PlainMessage<QueryMacSerialListRequest> | undefined): boolean {
    return proto3.util.equals(QueryMacSerialListRequest, a, b);
  }
}

/**
 * @generated from message api.ps.v1.QueryMacSerialListResponse
 */
export class QueryMacSerialListResponse extends Message<QueryMacSerialListResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: int64 setting_id = 4;
   */
  settingId = protoInt64.zero;

  /**
   * @generated from field: string message = 5;
   */
  message = "";

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 6;
   */
  pageMeta?: PageMeta;

  /**
   * @generated from field: repeated api.psm.v1.MacSerial mac_serial_list = 7;
   */
  macSerialList: MacSerial[] = [];

  constructor(data?: PartialMessage<QueryMacSerialListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ps.v1.QueryMacSerialListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "setting_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "page_meta", kind: "message", T: PageMeta },
    { no: 7, name: "mac_serial_list", kind: "message", T: MacSerial, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryMacSerialListResponse {
    return new QueryMacSerialListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryMacSerialListResponse {
    return new QueryMacSerialListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryMacSerialListResponse {
    return new QueryMacSerialListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryMacSerialListResponse | PlainMessage<QueryMacSerialListResponse> | undefined, b: QueryMacSerialListResponse | PlainMessage<QueryMacSerialListResponse> | undefined): boolean {
    return proto3.util.equals(QueryMacSerialListResponse, a, b);
  }
}

