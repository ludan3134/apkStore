// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file api/ax/v1/axm.proto (package api.ax.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message api.ax.v1.User
 */
export class User extends Message<User> {
  /**
   * 用户id
   *
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * 账号
   *
   * @generated from field: string user_name = 2;
   */
  userName = "";

  /**
   * 密码
   *
   * @generated from field: string password = 3;
   */
  password = "";

  /**
   * 是否删除 true是  false否
   *
   * @generated from field: bool deleted = 4;
   */
  deleted = false;

  /**
   * 创建时间
   *
   * @generated from field: int64 created = 5;
   */
  created = protoInt64.zero;

  /**
   * 更新时间
   *
   * @generated from field: int64 updated = 6;
   */
  updated = protoInt64.zero;

  /**
   * 角色id
   *
   * @generated from field: int32 role_id = 7;
   */
  roleId = 0;

  /**
   * 是否启用 false 否 true 是
   *
   * @generated from field: bool is_use = 8;
   */
  isUse = false;

  /**
   * @generated from field: string distributor_id = 9;
   */
  distributorId = "";

  /**
   * @generated from field: string role_name = 10;
   */
  roleName = "";

  /**
   * @generated from field: string distributor_name = 11;
   */
  distributorName = "";

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ax.v1.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "deleted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "created", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "updated", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "role_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "is_use", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "distributor_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "role_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "distributor_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * @generated from message api.ax.v1.UserLabel
 */
export class UserLabel extends Message<UserLabel> {
  /**
   * 用户id
   *
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * 用户名
   *
   * @generated from field: string label = 2;
   */
  label = "";

  constructor(data?: PartialMessage<UserLabel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ax.v1.UserLabel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserLabel {
    return new UserLabel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserLabel {
    return new UserLabel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserLabel {
    return new UserLabel().fromJsonString(jsonString, options);
  }

  static equals(a: UserLabel | PlainMessage<UserLabel> | undefined, b: UserLabel | PlainMessage<UserLabel> | undefined): boolean {
    return proto3.util.equals(UserLabel, a, b);
  }
}

/**
 * @generated from message api.ax.v1.UserList
 */
export class UserList extends Message<UserList> {
  /**
   * 用户id
   *
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * 用户名
   *
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<UserList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ax.v1.UserList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserList {
    return new UserList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserList {
    return new UserList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserList {
    return new UserList().fromJsonString(jsonString, options);
  }

  static equals(a: UserList | PlainMessage<UserList> | undefined, b: UserList | PlainMessage<UserList> | undefined): boolean {
    return proto3.util.equals(UserList, a, b);
  }
}

/**
 * @generated from message api.ax.v1.Role
 */
export class Role extends Message<Role> {
  /**
   * 角色id
   *
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * 角色名
   *
   * @generated from field: string role_name = 2;
   */
  roleName = "";

  /**
   * 是否代理商角色  0否  1是
   *
   * @generated from field: int32 is_distributor = 3;
   */
  isDistributor = 0;

  constructor(data?: PartialMessage<Role>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ax.v1.Role";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "role_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "is_distributor", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Role {
    return new Role().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Role {
    return new Role().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Role {
    return new Role().fromJsonString(jsonString, options);
  }

  static equals(a: Role | PlainMessage<Role> | undefined, b: Role | PlainMessage<Role> | undefined): boolean {
    return proto3.util.equals(Role, a, b);
  }
}

/**
 * @generated from message api.ax.v1.RoleLabel
 */
export class RoleLabel extends Message<RoleLabel> {
  /**
   * 角色id
   *
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * 角色名
   *
   * @generated from field: string label = 2;
   */
  label = "";

  constructor(data?: PartialMessage<RoleLabel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ax.v1.RoleLabel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoleLabel {
    return new RoleLabel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoleLabel {
    return new RoleLabel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoleLabel {
    return new RoleLabel().fromJsonString(jsonString, options);
  }

  static equals(a: RoleLabel | PlainMessage<RoleLabel> | undefined, b: RoleLabel | PlainMessage<RoleLabel> | undefined): boolean {
    return proto3.util.equals(RoleLabel, a, b);
  }
}

/**
 * @generated from message api.ax.v1.Menu
 */
export class Menu extends Message<Menu> {
  /**
   * 菜单id
   *
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * 父id
   *
   * @generated from field: int32 parent_id = 2;
   */
  parentId = 0;

  /**
   * 类型 1 menu  2 button
   *
   * @generated from field: int32 type = 3;
   */
  type = 0;

  /**
   * 菜单名
   *
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * 前端路由
   *
   * @generated from field: string url = 5;
   */
  url = "";

  /**
   * 接口路径
   *
   * @generated from field: string path = 6;
   */
  path = "";

  /**
   * @generated from field: int32 sort = 7;
   */
  sort = 0;

  /**
   * @generated from field: string icon = 8;
   */
  icon = "";

  constructor(data?: PartialMessage<Menu>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ax.v1.Menu";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "parent_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "type", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "sort", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "icon", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Menu {
    return new Menu().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Menu {
    return new Menu().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Menu {
    return new Menu().fromJsonString(jsonString, options);
  }

  static equals(a: Menu | PlainMessage<Menu> | undefined, b: Menu | PlainMessage<Menu> | undefined): boolean {
    return proto3.util.equals(Menu, a, b);
  }
}

/**
 * @generated from message api.ax.v1.RoleMenu
 */
export class RoleMenu extends Message<RoleMenu> {
  /**
   * 角色id
   *
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * 角色名
   *
   * @generated from field: string role_name = 2;
   */
  roleName = "";

  /**
   * @generated from field: repeated api.ax.v1.Menu menu_list = 4;
   */
  menuList: Menu[] = [];

  /**
   * 是否代理商角色  0否  1是
   *
   * @generated from field: int32 is_distributor = 5;
   */
  isDistributor = 0;

  constructor(data?: PartialMessage<RoleMenu>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ax.v1.RoleMenu";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "role_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "menu_list", kind: "message", T: Menu, repeated: true },
    { no: 5, name: "is_distributor", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoleMenu {
    return new RoleMenu().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoleMenu {
    return new RoleMenu().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoleMenu {
    return new RoleMenu().fromJsonString(jsonString, options);
  }

  static equals(a: RoleMenu | PlainMessage<RoleMenu> | undefined, b: RoleMenu | PlainMessage<RoleMenu> | undefined): boolean {
    return proto3.util.equals(RoleMenu, a, b);
  }
}

/**
 * @generated from message api.ax.v1.UserInfo
 */
export class UserInfo extends Message<UserInfo> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * 账号
   *
   * @generated from field: string user_name = 2;
   */
  userName = "";

  /**
   * 密码
   *
   * @generated from field: string password = 3;
   */
  password = "";

  /**
   * 是否删除 fase 否  true 是
   *
   * @generated from field: bool deleted = 4;
   */
  deleted = false;

  /**
   * 角色id
   *
   * @generated from field: int32 role_id = 5;
   */
  roleId = 0;

  /**
   * 是否启用 false 否 true 是
   *
   * @generated from field: bool is_use = 6;
   */
  isUse = false;

  /**
   * @generated from field: int64 distributor_id = 7;
   */
  distributorId = protoInt64.zero;

  /**
   * @generated from field: repeated api.ax.v1.Menu menu_list = 8;
   */
  menuList: Menu[] = [];

  /**
   * @generated from field: int32 is_distributor = 9;
   */
  isDistributor = 0;

  constructor(data?: PartialMessage<UserInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ax.v1.UserInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "deleted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "role_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "is_use", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "distributor_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "menu_list", kind: "message", T: Menu, repeated: true },
    { no: 9, name: "is_distributor", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserInfo {
    return new UserInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserInfo {
    return new UserInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserInfo {
    return new UserInfo().fromJsonString(jsonString, options);
  }

  static equals(a: UserInfo | PlainMessage<UserInfo> | undefined, b: UserInfo | PlainMessage<UserInfo> | undefined): boolean {
    return proto3.util.equals(UserInfo, a, b);
  }
}

/**
 * @generated from message api.ax.v1.Distributor
 */
export class Distributor extends Message<Distributor> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: string identity = 3;
   */
  identity = "";

  /**
   * @generated from field: string updated_at = 4;
   */
  updatedAt = "";

  /**
   * @generated from field: string parent_id = 5;
   */
  parentId = "";

  /**
   * @generated from field: string master = 6;
   */
  master = "";

  constructor(data?: PartialMessage<Distributor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ax.v1.Distributor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "updated_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "parent_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "master", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Distributor {
    return new Distributor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Distributor {
    return new Distributor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Distributor {
    return new Distributor().fromJsonString(jsonString, options);
  }

  static equals(a: Distributor | PlainMessage<Distributor> | undefined, b: Distributor | PlainMessage<Distributor> | undefined): boolean {
    return proto3.util.equals(Distributor, a, b);
  }
}

/**
 * @generated from message api.ax.v1.Model
 */
export class Model extends Message<Model> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string updated_at = 4;
   */
  updatedAt = "";

  /**
   * @generated from field: string parent_id = 5;
   */
  parentId = "";

  /**
   * @generated from field: string master = 6;
   */
  master = "";

  /**
   * @generated from field: int32 type = 7;
   */
  type = 0;

  constructor(data?: PartialMessage<Model>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ax.v1.Model";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "updated_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "parent_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "master", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "type", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Model {
    return new Model().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Model {
    return new Model().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Model {
    return new Model().fromJsonString(jsonString, options);
  }

  static equals(a: Model | PlainMessage<Model> | undefined, b: Model | PlainMessage<Model> | undefined): boolean {
    return proto3.util.equals(Model, a, b);
  }
}

/**
 * @generated from message api.ax.v1.DistributorLabel
 */
export class DistributorLabel extends Message<DistributorLabel> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string label = 2;
   */
  label = "";

  constructor(data?: PartialMessage<DistributorLabel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ax.v1.DistributorLabel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DistributorLabel {
    return new DistributorLabel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DistributorLabel {
    return new DistributorLabel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DistributorLabel {
    return new DistributorLabel().fromJsonString(jsonString, options);
  }

  static equals(a: DistributorLabel | PlainMessage<DistributorLabel> | undefined, b: DistributorLabel | PlainMessage<DistributorLabel> | undefined): boolean {
    return proto3.util.equals(DistributorLabel, a, b);
  }
}

/**
 * @generated from message api.ax.v1.ModelLabel
 */
export class ModelLabel extends Message<ModelLabel> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string distributor_id = 2;
   */
  distributorId = "";

  /**
   * @generated from field: string label = 3;
   */
  label = "";

  constructor(data?: PartialMessage<ModelLabel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ax.v1.ModelLabel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "distributor_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModelLabel {
    return new ModelLabel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModelLabel {
    return new ModelLabel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModelLabel {
    return new ModelLabel().fromJsonString(jsonString, options);
  }

  static equals(a: ModelLabel | PlainMessage<ModelLabel> | undefined, b: ModelLabel | PlainMessage<ModelLabel> | undefined): boolean {
    return proto3.util.equals(ModelLabel, a, b);
  }
}

/**
 * @generated from message api.ax.v1.GeneralTree
 */
export class GeneralTree extends Message<GeneralTree> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: string parent_id = 3;
   */
  parentId = "";

  /**
   * @generated from field: int32 type = 4;
   */
  type = 0;

  constructor(data?: PartialMessage<GeneralTree>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ax.v1.GeneralTree";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "parent_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "type", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GeneralTree {
    return new GeneralTree().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GeneralTree {
    return new GeneralTree().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GeneralTree {
    return new GeneralTree().fromJsonString(jsonString, options);
  }

  static equals(a: GeneralTree | PlainMessage<GeneralTree> | undefined, b: GeneralTree | PlainMessage<GeneralTree> | undefined): boolean {
    return proto3.util.equals(GeneralTree, a, b);
  }
}

/**
 * @generated from message api.ax.v1.TreeNode
 */
export class TreeNode extends Message<TreeNode> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  /**
   * @generated from field: string key = 3;
   */
  key = "";

  /**
   * @generated from field: int32 type = 4;
   */
  type = 0;

  /**
   * @generated from field: repeated api.ax.v1.TreeNode children = 5;
   */
  children: TreeNode[] = [];

  constructor(data?: PartialMessage<TreeNode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ax.v1.TreeNode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "type", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "children", kind: "message", T: TreeNode, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TreeNode {
    return new TreeNode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TreeNode {
    return new TreeNode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TreeNode {
    return new TreeNode().fromJsonString(jsonString, options);
  }

  static equals(a: TreeNode | PlainMessage<TreeNode> | undefined, b: TreeNode | PlainMessage<TreeNode> | undefined): boolean {
    return proto3.util.equals(TreeNode, a, b);
  }
}

/**
 * @generated from message api.ax.v1.FailedRecord
 */
export class FailedRecord extends Message<FailedRecord> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * 同一批标识
   *
   * @generated from field: string identify = 2;
   */
  identify = "";

  /**
   * 参数
   *
   * @generated from field: string params = 3;
   */
  params = "";

  /**
   * @generated from field: string mac = 4;
   */
  mac = "";

  /**
   * @generated from field: string chip = 5;
   */
  chip = "";

  /**
   * @generated from field: string sn = 6;
   */
  sn = "";

  /**
   * 激活码
   *
   * @generated from field: string active_code = 7;
   */
  activeCode = "";

  /**
   * 创建时间
   *
   * @generated from field: string create_time = 8;
   */
  createTime = "";

  /**
   * 总数
   *
   * @generated from field: int32 total = 9;
   */
  total = 0;

  /**
   * 错误
   *
   * @generated from field: string err = 10;
   */
  err = "";

  /**
   * 接口名 1 批量导入终端  2 批量创建XC账号
   *
   * @generated from field: int32 api_type = 11;
   */
  apiType = 0;

  /**
   * 扩展
   *
   * @generated from field: string ext = 12;
   */
  ext = "";

  /**
   * 平台类型 1 盒子 2 电视机
   *
   * @generated from field: int32 platform_type = 13;
   */
  platformType = 0;

  constructor(data?: PartialMessage<FailedRecord>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ax.v1.FailedRecord";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "identify", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "params", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "mac", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "chip", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "sn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "active_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "create_time", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "total", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "err", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "api_type", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 12, name: "ext", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "platform_type", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FailedRecord {
    return new FailedRecord().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FailedRecord {
    return new FailedRecord().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FailedRecord {
    return new FailedRecord().fromJsonString(jsonString, options);
  }

  static equals(a: FailedRecord | PlainMessage<FailedRecord> | undefined, b: FailedRecord | PlainMessage<FailedRecord> | undefined): boolean {
    return proto3.util.equals(FailedRecord, a, b);
  }
}

/**
 * @generated from message api.ax.v1.ServerConfig
 */
export class ServerConfig extends Message<ServerConfig> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: string domain = 2;
   */
  domain = "";

  /**
   * @generated from field: int32 addr_type = 3;
   */
  addrType = 0;

  /**
   * @generated from field: bool is_use = 4;
   */
  isUse = false;

  /**
   * @generated from field: string create_at = 5;
   */
  createAt = "";

  /**
   * @generated from field: string update_at = 6;
   */
  updateAt = "";

  constructor(data?: PartialMessage<ServerConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ax.v1.ServerConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "addr_type", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "is_use", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "create_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "update_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerConfig {
    return new ServerConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerConfig {
    return new ServerConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerConfig {
    return new ServerConfig().fromJsonString(jsonString, options);
  }

  static equals(a: ServerConfig | PlainMessage<ServerConfig> | undefined, b: ServerConfig | PlainMessage<ServerConfig> | undefined): boolean {
    return proto3.util.equals(ServerConfig, a, b);
  }
}

/**
 * @generated from message api.ax.v1.DistributorModelList
 */
export class DistributorModelList extends Message<DistributorModelList> {
  /**
   * @generated from field: string distributor_id = 1;
   */
  distributorId = "";

  /**
   * @generated from field: repeated api.ax.v1.TreeNode model_list = 2;
   */
  modelList: TreeNode[] = [];

  constructor(data?: PartialMessage<DistributorModelList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ax.v1.DistributorModelList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "distributor_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "model_list", kind: "message", T: TreeNode, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DistributorModelList {
    return new DistributorModelList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DistributorModelList {
    return new DistributorModelList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DistributorModelList {
    return new DistributorModelList().fromJsonString(jsonString, options);
  }

  static equals(a: DistributorModelList | PlainMessage<DistributorModelList> | undefined, b: DistributorModelList | PlainMessage<DistributorModelList> | undefined): boolean {
    return proto3.util.equals(DistributorModelList, a, b);
  }
}

/**
 * @generated from message api.ax.v1.MacDevice
 */
export class MacDevice extends Message<MacDevice> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: string mac = 2;
   */
  mac = "";

  /**
   * @generated from field: string timestamp = 3;
   */
  timestamp = "";

  /**
   * @generated from field: string model_name = 4;
   */
  modelName = "";

  /**
   * @generated from field: string version = 5;
   */
  version = "";

  /**
   * @generated from field: string build_id = 7;
   */
  buildId = "";

  constructor(data?: PartialMessage<MacDevice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ax.v1.MacDevice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "mac", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "timestamp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "model_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MacDevice {
    return new MacDevice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MacDevice {
    return new MacDevice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MacDevice {
    return new MacDevice().fromJsonString(jsonString, options);
  }

  static equals(a: MacDevice | PlainMessage<MacDevice> | undefined, b: MacDevice | PlainMessage<MacDevice> | undefined): boolean {
    return proto3.util.equals(MacDevice, a, b);
  }
}

/**
 * @generated from message api.ax.v1.MacApk
 */
export class MacApk extends Message<MacApk> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: string mac = 2;
   */
  mac = "";

  /**
   * @generated from field: string timestamp = 3;
   */
  timestamp = "";

  /**
   * @generated from field: string model_name = 4;
   */
  modelName = "";

  /**
   * @generated from field: string version = 5;
   */
  version = "";

  /**
   * @generated from field: string class = 7;
   */
  class = "";

  constructor(data?: PartialMessage<MacApk>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ax.v1.MacApk";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "mac", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "timestamp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "model_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "class", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MacApk {
    return new MacApk().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MacApk {
    return new MacApk().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MacApk {
    return new MacApk().fromJsonString(jsonString, options);
  }

  static equals(a: MacApk | PlainMessage<MacApk> | undefined, b: MacApk | PlainMessage<MacApk> | undefined): boolean {
    return proto3.util.equals(MacApk, a, b);
  }
}

/**
 * @generated from message api.ax.v1.MacActivity
 */
export class MacActivity extends Message<MacActivity> {
  /**
   * @generated from field: string mac = 1;
   */
  mac = "";

  /**
   * @generated from field: string ts = 2;
   */
  ts = "";

  /**
   * @generated from field: string distributor_id = 3;
   */
  distributorId = "";

  /**
   * @generated from field: string model_id = 4;
   */
  modelId = "";

  /**
   * @generated from field: string country = 5;
   */
  country = "";

  /**
   * @generated from field: string city = 6;
   */
  city = "";

  /**
   * @generated from field: string last_auth_ip = 7;
   */
  lastAuthIp = "";

  constructor(data?: PartialMessage<MacActivity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ax.v1.MacActivity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mac", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ts", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "distributor_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "model_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "last_auth_ip", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MacActivity {
    return new MacActivity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MacActivity {
    return new MacActivity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MacActivity {
    return new MacActivity().fromJsonString(jsonString, options);
  }

  static equals(a: MacActivity | PlainMessage<MacActivity> | undefined, b: MacActivity | PlainMessage<MacActivity> | undefined): boolean {
    return proto3.util.equals(MacActivity, a, b);
  }
}

/**
 * @generated from message api.ax.v1.MacActivityFilter
 */
export class MacActivityFilter extends Message<MacActivityFilter> {
  /**
   * @generated from field: string mac = 1;
   */
  mac = "";

  /**
   * @generated from field: string ts = 2;
   */
  ts = "";

  /**
   * @generated from field: string distributor_id = 3;
   */
  distributorId = "";

  /**
   * @generated from field: string model_id = 4;
   */
  modelId = "";

  /**
   * @generated from field: string start_time = 5;
   */
  startTime = "";

  /**
   * @generated from field: string end_time = 6;
   */
  endTime = "";

  constructor(data?: PartialMessage<MacActivityFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ax.v1.MacActivityFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mac", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ts", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "distributor_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "model_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "start_time", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "end_time", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MacActivityFilter {
    return new MacActivityFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MacActivityFilter {
    return new MacActivityFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MacActivityFilter {
    return new MacActivityFilter().fromJsonString(jsonString, options);
  }

  static equals(a: MacActivityFilter | PlainMessage<MacActivityFilter> | undefined, b: MacActivityFilter | PlainMessage<MacActivityFilter> | undefined): boolean {
    return proto3.util.equals(MacActivityFilter, a, b);
  }
}

/**
 * @generated from message api.ax.v1.MacCityFilter
 */
export class MacCityFilter extends Message<MacCityFilter> {
  /**
   * @generated from field: string mac = 1;
   */
  mac = "";

  /**
   * @generated from field: string ts = 2;
   */
  ts = "";

  /**
   * @generated from field: string distributor_id = 3;
   */
  distributorId = "";

  /**
   * @generated from field: string model_id = 4;
   */
  modelId = "";

  /**
   * @generated from field: string country = 5;
   */
  country = "";

  /**
   * @generated from field: string city = 6;
   */
  city = "";

  constructor(data?: PartialMessage<MacCityFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ax.v1.MacCityFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mac", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ts", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "distributor_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "model_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MacCityFilter {
    return new MacCityFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MacCityFilter {
    return new MacCityFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MacCityFilter {
    return new MacCityFilter().fromJsonString(jsonString, options);
  }

  static equals(a: MacCityFilter | PlainMessage<MacCityFilter> | undefined, b: MacCityFilter | PlainMessage<MacCityFilter> | undefined): boolean {
    return proto3.util.equals(MacCityFilter, a, b);
  }
}

/**
 * @generated from message api.ax.v1.MacAuthRecord
 */
export class MacAuthRecord extends Message<MacAuthRecord> {
  /**
   * @generated from field: string mac = 1;
   */
  mac = "";

  /**
   * @generated from field: string ts = 2;
   */
  ts = "";

  /**
   * @generated from field: string msg = 3;
   */
  msg = "";

  constructor(data?: PartialMessage<MacAuthRecord>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ax.v1.MacAuthRecord";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mac", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ts", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MacAuthRecord {
    return new MacAuthRecord().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MacAuthRecord {
    return new MacAuthRecord().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MacAuthRecord {
    return new MacAuthRecord().fromJsonString(jsonString, options);
  }

  static equals(a: MacAuthRecord | PlainMessage<MacAuthRecord> | undefined, b: MacAuthRecord | PlainMessage<MacAuthRecord> | undefined): boolean {
    return proto3.util.equals(MacAuthRecord, a, b);
  }
}

/**
 * @generated from message api.ax.v1.MacDailyActivity
 */
export class MacDailyActivity extends Message<MacDailyActivity> {
  /**
   * @generated from field: string date = 1;
   */
  date = "";

  /**
   * @generated from field: int32 mac_count = 2;
   */
  macCount = 0;

  constructor(data?: PartialMessage<MacDailyActivity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ax.v1.MacDailyActivity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "mac_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MacDailyActivity {
    return new MacDailyActivity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MacDailyActivity {
    return new MacDailyActivity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MacDailyActivity {
    return new MacDailyActivity().fromJsonString(jsonString, options);
  }

  static equals(a: MacDailyActivity | PlainMessage<MacDailyActivity> | undefined, b: MacDailyActivity | PlainMessage<MacDailyActivity> | undefined): boolean {
    return proto3.util.equals(MacDailyActivity, a, b);
  }
}

/**
 * @generated from message api.ax.v1.MacModelCount
 */
export class MacModelCount extends Message<MacModelCount> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: int32 value = 2;
   */
  value = 0;

  constructor(data?: PartialMessage<MacModelCount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ax.v1.MacModelCount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MacModelCount {
    return new MacModelCount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MacModelCount {
    return new MacModelCount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MacModelCount {
    return new MacModelCount().fromJsonString(jsonString, options);
  }

  static equals(a: MacModelCount | PlainMessage<MacModelCount> | undefined, b: MacModelCount | PlainMessage<MacModelCount> | undefined): boolean {
    return proto3.util.equals(MacModelCount, a, b);
  }
}

/**
 * @generated from message api.ax.v1.MacDistributorCount
 */
export class MacDistributorCount extends Message<MacDistributorCount> {
  /**
   * @generated from field: string distributor_name = 1;
   */
  distributorName = "";

  /**
   * @generated from field: int32 mac_count = 2;
   */
  macCount = 0;

  constructor(data?: PartialMessage<MacDistributorCount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ax.v1.MacDistributorCount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "distributor_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "mac_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MacDistributorCount {
    return new MacDistributorCount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MacDistributorCount {
    return new MacDistributorCount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MacDistributorCount {
    return new MacDistributorCount().fromJsonString(jsonString, options);
  }

  static equals(a: MacDistributorCount | PlainMessage<MacDistributorCount> | undefined, b: MacDistributorCount | PlainMessage<MacDistributorCount> | undefined): boolean {
    return proto3.util.equals(MacDistributorCount, a, b);
  }
}

