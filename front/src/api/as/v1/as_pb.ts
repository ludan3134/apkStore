// as 服务, 即是 a3 的 grpc 服务

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file api/as/v1/as.proto (package api.as.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Account, AccountFilter, AccountInfo, Distributor, DistributorLabel, ImportTerminal, IpLimit, Lot, LotLabel, LotValueLabel, Portal, PortalInfo, Server, ServerGroup, ServerOption, Terminal, TerminalFilter, TerminalInfo } from "../../asm/v1/asm_pb.ts";
import { PageMeta } from "../../com/v1/pagemeta_pb.ts";

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.as.v1.QueryTerminalByMacRequest
 */
export class QueryTerminalByMacRequest extends Message<QueryTerminalByMacRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 ip = 3;
   */
  ip = protoInt64.zero;

  /**
   * @generated from field: string mac_string = 4;
   */
  macString = "";

  constructor(data?: PartialMessage<QueryTerminalByMacRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryTerminalByMacRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ip", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "mac_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTerminalByMacRequest {
    return new QueryTerminalByMacRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTerminalByMacRequest {
    return new QueryTerminalByMacRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTerminalByMacRequest {
    return new QueryTerminalByMacRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTerminalByMacRequest | PlainMessage<QueryTerminalByMacRequest> | undefined, b: QueryTerminalByMacRequest | PlainMessage<QueryTerminalByMacRequest> | undefined): boolean {
    return proto3.util.equals(QueryTerminalByMacRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.QueryTerminalByMacResponse
 */
export class QueryTerminalByMacResponse extends Message<QueryTerminalByMacResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: api.asm.v1.Terminal terminal = 5;
   */
  terminal?: Terminal;

  constructor(data?: PartialMessage<QueryTerminalByMacResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryTerminalByMacResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "terminal", kind: "message", T: Terminal },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTerminalByMacResponse {
    return new QueryTerminalByMacResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTerminalByMacResponse {
    return new QueryTerminalByMacResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTerminalByMacResponse {
    return new QueryTerminalByMacResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTerminalByMacResponse | PlainMessage<QueryTerminalByMacResponse> | undefined, b: QueryTerminalByMacResponse | PlainMessage<QueryTerminalByMacResponse> | undefined): boolean {
    return proto3.util.equals(QueryTerminalByMacResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.as.v1.QueryTerminalByChipRequest
 */
export class QueryTerminalByChipRequest extends Message<QueryTerminalByChipRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 ip = 3;
   */
  ip = protoInt64.zero;

  /**
   * @generated from field: string chip_identity = 4;
   */
  chipIdentity = "";

  constructor(data?: PartialMessage<QueryTerminalByChipRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryTerminalByChipRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ip", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "chip_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTerminalByChipRequest {
    return new QueryTerminalByChipRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTerminalByChipRequest {
    return new QueryTerminalByChipRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTerminalByChipRequest {
    return new QueryTerminalByChipRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTerminalByChipRequest | PlainMessage<QueryTerminalByChipRequest> | undefined, b: QueryTerminalByChipRequest | PlainMessage<QueryTerminalByChipRequest> | undefined): boolean {
    return proto3.util.equals(QueryTerminalByChipRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.QueryTerminalByChipResponse
 */
export class QueryTerminalByChipResponse extends Message<QueryTerminalByChipResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: api.asm.v1.Terminal terminal = 5;
   */
  terminal?: Terminal;

  constructor(data?: PartialMessage<QueryTerminalByChipResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryTerminalByChipResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "terminal", kind: "message", T: Terminal },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTerminalByChipResponse {
    return new QueryTerminalByChipResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTerminalByChipResponse {
    return new QueryTerminalByChipResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTerminalByChipResponse {
    return new QueryTerminalByChipResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTerminalByChipResponse | PlainMessage<QueryTerminalByChipResponse> | undefined, b: QueryTerminalByChipResponse | PlainMessage<QueryTerminalByChipResponse> | undefined): boolean {
    return proto3.util.equals(QueryTerminalByChipResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.as.v1.UpdateTerminalListRequest
 */
export class UpdateTerminalListRequest extends Message<UpdateTerminalListRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 ip = 3;
   */
  ip = protoInt64.zero;

  /**
   * @generated from field: repeated api.asm.v1.Terminal terminal_list = 4;
   */
  terminalList: Terminal[] = [];

  constructor(data?: PartialMessage<UpdateTerminalListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.UpdateTerminalListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ip", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "terminal_list", kind: "message", T: Terminal, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTerminalListRequest {
    return new UpdateTerminalListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTerminalListRequest {
    return new UpdateTerminalListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTerminalListRequest {
    return new UpdateTerminalListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateTerminalListRequest | PlainMessage<UpdateTerminalListRequest> | undefined, b: UpdateTerminalListRequest | PlainMessage<UpdateTerminalListRequest> | undefined): boolean {
    return proto3.util.equals(UpdateTerminalListRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.UpdateTerminalListResponse
 */
export class UpdateTerminalListResponse extends Message<UpdateTerminalListResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: repeated api.asm.v1.Terminal terminal_list = 5;
   */
  terminalList: Terminal[] = [];

  constructor(data?: PartialMessage<UpdateTerminalListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.UpdateTerminalListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "terminal_list", kind: "message", T: Terminal, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTerminalListResponse {
    return new UpdateTerminalListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTerminalListResponse {
    return new UpdateTerminalListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTerminalListResponse {
    return new UpdateTerminalListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateTerminalListResponse | PlainMessage<UpdateTerminalListResponse> | undefined, b: UpdateTerminalListResponse | PlainMessage<UpdateTerminalListResponse> | undefined): boolean {
    return proto3.util.equals(UpdateTerminalListResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.as.v1.QueryPortalListRequest
 */
export class QueryPortalListRequest extends Message<QueryPortalListRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 ip = 3;
   */
  ip = protoInt64.zero;

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 4;
   */
  pageMeta?: PageMeta;

  constructor(data?: PartialMessage<QueryPortalListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryPortalListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ip", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "page_meta", kind: "message", T: PageMeta },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPortalListRequest {
    return new QueryPortalListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPortalListRequest {
    return new QueryPortalListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPortalListRequest {
    return new QueryPortalListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPortalListRequest | PlainMessage<QueryPortalListRequest> | undefined, b: QueryPortalListRequest | PlainMessage<QueryPortalListRequest> | undefined): boolean {
    return proto3.util.equals(QueryPortalListRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.QueryPortalListResponse
 */
export class QueryPortalListResponse extends Message<QueryPortalListResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: repeated api.asm.v1.PortalInfo portal_list = 5;
   */
  portalList: PortalInfo[] = [];

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 6;
   */
  pageMeta?: PageMeta;

  constructor(data?: PartialMessage<QueryPortalListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryPortalListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "portal_list", kind: "message", T: PortalInfo, repeated: true },
    { no: 6, name: "page_meta", kind: "message", T: PageMeta },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPortalListResponse {
    return new QueryPortalListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPortalListResponse {
    return new QueryPortalListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPortalListResponse {
    return new QueryPortalListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPortalListResponse | PlainMessage<QueryPortalListResponse> | undefined, b: QueryPortalListResponse | PlainMessage<QueryPortalListResponse> | undefined): boolean {
    return proto3.util.equals(QueryPortalListResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.as.v1.QueryPortalListByApkRequest
 */
export class QueryPortalListByApkRequest extends Message<QueryPortalListByApkRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 ip = 3;
   */
  ip = protoInt64.zero;

  /**
   * @generated from field: string apk_type = 4;
   */
  apkType = "";

  /**
   * @generated from field: string middleware_version = 5;
   */
  middlewareVersion = "";

  constructor(data?: PartialMessage<QueryPortalListByApkRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryPortalListByApkRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ip", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "apk_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "middleware_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPortalListByApkRequest {
    return new QueryPortalListByApkRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPortalListByApkRequest {
    return new QueryPortalListByApkRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPortalListByApkRequest {
    return new QueryPortalListByApkRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPortalListByApkRequest | PlainMessage<QueryPortalListByApkRequest> | undefined, b: QueryPortalListByApkRequest | PlainMessage<QueryPortalListByApkRequest> | undefined): boolean {
    return proto3.util.equals(QueryPortalListByApkRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.QueryPortalListByApkResponse
 */
export class QueryPortalListByApkResponse extends Message<QueryPortalListByApkResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: string apk_type = 5;
   */
  apkType = "";

  /**
   * @generated from field: string middleware_version = 6;
   */
  middlewareVersion = "";

  /**
   * @generated from field: repeated api.asm.v1.Portal portal_list = 7;
   */
  portalList: Portal[] = [];

  constructor(data?: PartialMessage<QueryPortalListByApkResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryPortalListByApkResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "apk_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "middleware_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "portal_list", kind: "message", T: Portal, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPortalListByApkResponse {
    return new QueryPortalListByApkResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPortalListByApkResponse {
    return new QueryPortalListByApkResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPortalListByApkResponse {
    return new QueryPortalListByApkResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPortalListByApkResponse | PlainMessage<QueryPortalListByApkResponse> | undefined, b: QueryPortalListByApkResponse | PlainMessage<QueryPortalListByApkResponse> | undefined): boolean {
    return proto3.util.equals(QueryPortalListByApkResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.as.v1.QueryDistributorListRequest
 */
export class QueryDistributorListRequest extends Message<QueryDistributorListRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 ip = 3;
   */
  ip = protoInt64.zero;

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 4;
   */
  pageMeta?: PageMeta;

  constructor(data?: PartialMessage<QueryDistributorListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryDistributorListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ip", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "page_meta", kind: "message", T: PageMeta },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDistributorListRequest {
    return new QueryDistributorListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDistributorListRequest {
    return new QueryDistributorListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDistributorListRequest {
    return new QueryDistributorListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDistributorListRequest | PlainMessage<QueryDistributorListRequest> | undefined, b: QueryDistributorListRequest | PlainMessage<QueryDistributorListRequest> | undefined): boolean {
    return proto3.util.equals(QueryDistributorListRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.QueryDistributorListResponse
 */
export class QueryDistributorListResponse extends Message<QueryDistributorListResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: repeated api.asm.v1.Distributor distributor_list = 5;
   */
  distributorList: Distributor[] = [];

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 6;
   */
  pageMeta?: PageMeta;

  constructor(data?: PartialMessage<QueryDistributorListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryDistributorListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "distributor_list", kind: "message", T: Distributor, repeated: true },
    { no: 6, name: "page_meta", kind: "message", T: PageMeta },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDistributorListResponse {
    return new QueryDistributorListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDistributorListResponse {
    return new QueryDistributorListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDistributorListResponse {
    return new QueryDistributorListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDistributorListResponse | PlainMessage<QueryDistributorListResponse> | undefined, b: QueryDistributorListResponse | PlainMessage<QueryDistributorListResponse> | undefined): boolean {
    return proto3.util.equals(QueryDistributorListResponse, a, b);
  }
}

/**
 * @generated from message api.as.v1.InsertDistributorRequest
 */
export class InsertDistributorRequest extends Message<InsertDistributorRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 ip = 3;
   */
  ip = protoInt64.zero;

  /**
   * @generated from field: api.asm.v1.Distributor distributor = 4;
   */
  distributor?: Distributor;

  constructor(data?: PartialMessage<InsertDistributorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.InsertDistributorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ip", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "distributor", kind: "message", T: Distributor },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InsertDistributorRequest {
    return new InsertDistributorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InsertDistributorRequest {
    return new InsertDistributorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InsertDistributorRequest {
    return new InsertDistributorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InsertDistributorRequest | PlainMessage<InsertDistributorRequest> | undefined, b: InsertDistributorRequest | PlainMessage<InsertDistributorRequest> | undefined): boolean {
    return proto3.util.equals(InsertDistributorRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.InsertDistributorResponse
 */
export class InsertDistributorResponse extends Message<InsertDistributorResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: api.asm.v1.Distributor distributor = 5;
   */
  distributor?: Distributor;

  constructor(data?: PartialMessage<InsertDistributorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.InsertDistributorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "distributor", kind: "message", T: Distributor },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InsertDistributorResponse {
    return new InsertDistributorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InsertDistributorResponse {
    return new InsertDistributorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InsertDistributorResponse {
    return new InsertDistributorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InsertDistributorResponse | PlainMessage<InsertDistributorResponse> | undefined, b: InsertDistributorResponse | PlainMessage<InsertDistributorResponse> | undefined): boolean {
    return proto3.util.equals(InsertDistributorResponse, a, b);
  }
}

/**
 * @generated from message api.as.v1.QueryLotListRequest
 */
export class QueryLotListRequest extends Message<QueryLotListRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: string distributor_id = 3;
   */
  distributorId = "";

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 4;
   */
  pageMeta?: PageMeta;

  constructor(data?: PartialMessage<QueryLotListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryLotListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "distributor_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "page_meta", kind: "message", T: PageMeta },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLotListRequest {
    return new QueryLotListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLotListRequest {
    return new QueryLotListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLotListRequest {
    return new QueryLotListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLotListRequest | PlainMessage<QueryLotListRequest> | undefined, b: QueryLotListRequest | PlainMessage<QueryLotListRequest> | undefined): boolean {
    return proto3.util.equals(QueryLotListRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.QueryLotListResponse
 */
export class QueryLotListResponse extends Message<QueryLotListResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 5;
   */
  pageMeta?: PageMeta;

  /**
   * @generated from field: repeated api.asm.v1.Lot lot_list = 6;
   */
  lotList: Lot[] = [];

  constructor(data?: PartialMessage<QueryLotListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryLotListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "page_meta", kind: "message", T: PageMeta },
    { no: 6, name: "lot_list", kind: "message", T: Lot, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLotListResponse {
    return new QueryLotListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLotListResponse {
    return new QueryLotListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLotListResponse {
    return new QueryLotListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLotListResponse | PlainMessage<QueryLotListResponse> | undefined, b: QueryLotListResponse | PlainMessage<QueryLotListResponse> | undefined): boolean {
    return proto3.util.equals(QueryLotListResponse, a, b);
  }
}

/**
 * @generated from message api.as.v1.InsertLotRequest
 */
export class InsertLotRequest extends Message<InsertLotRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: api.asm.v1.Lot lot = 3;
   */
  lot?: Lot;

  constructor(data?: PartialMessage<InsertLotRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.InsertLotRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "lot", kind: "message", T: Lot },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InsertLotRequest {
    return new InsertLotRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InsertLotRequest {
    return new InsertLotRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InsertLotRequest {
    return new InsertLotRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InsertLotRequest | PlainMessage<InsertLotRequest> | undefined, b: InsertLotRequest | PlainMessage<InsertLotRequest> | undefined): boolean {
    return proto3.util.equals(InsertLotRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.InsertLotResponse
 */
export class InsertLotResponse extends Message<InsertLotResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  constructor(data?: PartialMessage<InsertLotResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.InsertLotResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InsertLotResponse {
    return new InsertLotResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InsertLotResponse {
    return new InsertLotResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InsertLotResponse {
    return new InsertLotResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InsertLotResponse | PlainMessage<InsertLotResponse> | undefined, b: InsertLotResponse | PlainMessage<InsertLotResponse> | undefined): boolean {
    return proto3.util.equals(InsertLotResponse, a, b);
  }
}

/**
 * @generated from message api.as.v1.UpdateLotRequest
 */
export class UpdateLotRequest extends Message<UpdateLotRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: api.asm.v1.Lot lot = 3;
   */
  lot?: Lot;

  constructor(data?: PartialMessage<UpdateLotRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.UpdateLotRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "lot", kind: "message", T: Lot },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateLotRequest {
    return new UpdateLotRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateLotRequest {
    return new UpdateLotRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateLotRequest {
    return new UpdateLotRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateLotRequest | PlainMessage<UpdateLotRequest> | undefined, b: UpdateLotRequest | PlainMessage<UpdateLotRequest> | undefined): boolean {
    return proto3.util.equals(UpdateLotRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.UpdateLotResponse
 */
export class UpdateLotResponse extends Message<UpdateLotResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  constructor(data?: PartialMessage<UpdateLotResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.UpdateLotResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateLotResponse {
    return new UpdateLotResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateLotResponse {
    return new UpdateLotResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateLotResponse {
    return new UpdateLotResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateLotResponse | PlainMessage<UpdateLotResponse> | undefined, b: UpdateLotResponse | PlainMessage<UpdateLotResponse> | undefined): boolean {
    return proto3.util.equals(UpdateLotResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.as.v1.QueryAccountByMacRequest
 */
export class QueryAccountByMacRequest extends Message<QueryAccountByMacRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 ip = 3;
   */
  ip = protoInt64.zero;

  /**
   * "xx:xx:xx:xx:00:00"
   *
   * @generated from field: string mac_string = 4;
   */
  macString = "";

  constructor(data?: PartialMessage<QueryAccountByMacRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryAccountByMacRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ip", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "mac_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAccountByMacRequest {
    return new QueryAccountByMacRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAccountByMacRequest {
    return new QueryAccountByMacRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAccountByMacRequest {
    return new QueryAccountByMacRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAccountByMacRequest | PlainMessage<QueryAccountByMacRequest> | undefined, b: QueryAccountByMacRequest | PlainMessage<QueryAccountByMacRequest> | undefined): boolean {
    return proto3.util.equals(QueryAccountByMacRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.QueryAccountByMacResponse
 */
export class QueryAccountByMacResponse extends Message<QueryAccountByMacResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 5;
   */
  pageMeta?: PageMeta;

  /**
   * @generated from field: api.asm.v1.Account account = 6;
   */
  account?: Account;

  constructor(data?: PartialMessage<QueryAccountByMacResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryAccountByMacResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "page_meta", kind: "message", T: PageMeta },
    { no: 6, name: "account", kind: "message", T: Account },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAccountByMacResponse {
    return new QueryAccountByMacResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAccountByMacResponse {
    return new QueryAccountByMacResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAccountByMacResponse {
    return new QueryAccountByMacResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAccountByMacResponse | PlainMessage<QueryAccountByMacResponse> | undefined, b: QueryAccountByMacResponse | PlainMessage<QueryAccountByMacResponse> | undefined): boolean {
    return proto3.util.equals(QueryAccountByMacResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.as.v1.QueryAccountByChipRequest
 */
export class QueryAccountByChipRequest extends Message<QueryAccountByChipRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 ip = 3;
   */
  ip = protoInt64.zero;

  /**
   * "xx:xx:xx:xx:00:00"
   *
   * @generated from field: string chip_identity = 4;
   */
  chipIdentity = "";

  constructor(data?: PartialMessage<QueryAccountByChipRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryAccountByChipRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ip", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "chip_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAccountByChipRequest {
    return new QueryAccountByChipRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAccountByChipRequest {
    return new QueryAccountByChipRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAccountByChipRequest {
    return new QueryAccountByChipRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAccountByChipRequest | PlainMessage<QueryAccountByChipRequest> | undefined, b: QueryAccountByChipRequest | PlainMessage<QueryAccountByChipRequest> | undefined): boolean {
    return proto3.util.equals(QueryAccountByChipRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.QueryAccountByChipResponse
 */
export class QueryAccountByChipResponse extends Message<QueryAccountByChipResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 5;
   */
  pageMeta?: PageMeta;

  /**
   * @generated from field: api.asm.v1.Account account = 6;
   */
  account?: Account;

  constructor(data?: PartialMessage<QueryAccountByChipResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryAccountByChipResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "page_meta", kind: "message", T: PageMeta },
    { no: 6, name: "account", kind: "message", T: Account },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAccountByChipResponse {
    return new QueryAccountByChipResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAccountByChipResponse {
    return new QueryAccountByChipResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAccountByChipResponse {
    return new QueryAccountByChipResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAccountByChipResponse | PlainMessage<QueryAccountByChipResponse> | undefined, b: QueryAccountByChipResponse | PlainMessage<QueryAccountByChipResponse> | undefined): boolean {
    return proto3.util.equals(QueryAccountByChipResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.as.v1.RegisterAccountRequest
 */
export class RegisterAccountRequest extends Message<RegisterAccountRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 ip = 3;
   */
  ip = protoInt64.zero;

  /**
   * @generated from field: api.asm.v1.Account account = 4;
   */
  account?: Account;

  constructor(data?: PartialMessage<RegisterAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.RegisterAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ip", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "account", kind: "message", T: Account },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterAccountRequest {
    return new RegisterAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterAccountRequest {
    return new RegisterAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterAccountRequest {
    return new RegisterAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterAccountRequest | PlainMessage<RegisterAccountRequest> | undefined, b: RegisterAccountRequest | PlainMessage<RegisterAccountRequest> | undefined): boolean {
    return proto3.util.equals(RegisterAccountRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.RegisterAccountResponse
 */
export class RegisterAccountResponse extends Message<RegisterAccountResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: api.asm.v1.Account account = 5;
   */
  account?: Account;

  constructor(data?: PartialMessage<RegisterAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.RegisterAccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "account", kind: "message", T: Account },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterAccountResponse {
    return new RegisterAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterAccountResponse {
    return new RegisterAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterAccountResponse {
    return new RegisterAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterAccountResponse | PlainMessage<RegisterAccountResponse> | undefined, b: RegisterAccountResponse | PlainMessage<RegisterAccountResponse> | undefined): boolean {
    return proto3.util.equals(RegisterAccountResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.as.v1.CountAccountRequest
 */
export class CountAccountRequest extends Message<CountAccountRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 ip = 3;
   */
  ip = protoInt64.zero;

  /**
   * @generated from field: int64 lot_id = 4;
   */
  lotId = protoInt64.zero;

  constructor(data?: PartialMessage<CountAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.CountAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ip", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "lot_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountAccountRequest {
    return new CountAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountAccountRequest {
    return new CountAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountAccountRequest {
    return new CountAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CountAccountRequest | PlainMessage<CountAccountRequest> | undefined, b: CountAccountRequest | PlainMessage<CountAccountRequest> | undefined): boolean {
    return proto3.util.equals(CountAccountRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.CountAccountResponse
 */
export class CountAccountResponse extends Message<CountAccountResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 lot_id = 3;
   */
  lotId = protoInt64.zero;

  /**
   * @generated from field: int32 total = 4;
   */
  total = 0;

  /**
   * @generated from field: bool status = 5;
   */
  status = false;

  /**
   * @generated from field: string message = 6;
   */
  message = "";

  constructor(data?: PartialMessage<CountAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.CountAccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "lot_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "total", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountAccountResponse {
    return new CountAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountAccountResponse {
    return new CountAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountAccountResponse {
    return new CountAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CountAccountResponse | PlainMessage<CountAccountResponse> | undefined, b: CountAccountResponse | PlainMessage<CountAccountResponse> | undefined): boolean {
    return proto3.util.equals(CountAccountResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.as.v1.CountTerminalRequest
 */
export class CountTerminalRequest extends Message<CountTerminalRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 ip = 3;
   */
  ip = protoInt64.zero;

  /**
   * @generated from field: int64 lot_id = 4;
   */
  lotId = protoInt64.zero;

  constructor(data?: PartialMessage<CountTerminalRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.CountTerminalRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ip", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "lot_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountTerminalRequest {
    return new CountTerminalRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountTerminalRequest {
    return new CountTerminalRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountTerminalRequest {
    return new CountTerminalRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CountTerminalRequest | PlainMessage<CountTerminalRequest> | undefined, b: CountTerminalRequest | PlainMessage<CountTerminalRequest> | undefined): boolean {
    return proto3.util.equals(CountTerminalRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.CountTerminalResponse
 */
export class CountTerminalResponse extends Message<CountTerminalResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 lot_id = 3;
   */
  lotId = protoInt64.zero;

  /**
   * @generated from field: bool status = 4;
   */
  status = false;

  /**
   * @generated from field: string message = 5;
   */
  message = "";

  /**
   * @generated from field: int32 total = 6;
   */
  total = 0;

  constructor(data?: PartialMessage<CountTerminalResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.CountTerminalResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "lot_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "total", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountTerminalResponse {
    return new CountTerminalResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountTerminalResponse {
    return new CountTerminalResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountTerminalResponse {
    return new CountTerminalResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CountTerminalResponse | PlainMessage<CountTerminalResponse> | undefined, b: CountTerminalResponse | PlainMessage<CountTerminalResponse> | undefined): boolean {
    return proto3.util.equals(CountTerminalResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.as.v1.QueryTerminalListRequest
 */
export class QueryTerminalListRequest extends Message<QueryTerminalListRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 ip = 3;
   */
  ip = protoInt64.zero;

  /**
   * @generated from field: int64 lot_id = 4;
   */
  lotId = protoInt64.zero;

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 5;
   */
  pageMeta?: PageMeta;

  constructor(data?: PartialMessage<QueryTerminalListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryTerminalListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ip", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "lot_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "page_meta", kind: "message", T: PageMeta },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTerminalListRequest {
    return new QueryTerminalListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTerminalListRequest {
    return new QueryTerminalListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTerminalListRequest {
    return new QueryTerminalListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTerminalListRequest | PlainMessage<QueryTerminalListRequest> | undefined, b: QueryTerminalListRequest | PlainMessage<QueryTerminalListRequest> | undefined): boolean {
    return proto3.util.equals(QueryTerminalListRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.QueryTerminalListResponse
 */
export class QueryTerminalListResponse extends Message<QueryTerminalListResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 lot_id = 3;
   */
  lotId = protoInt64.zero;

  /**
   * @generated from field: bool status = 4;
   */
  status = false;

  /**
   * @generated from field: string message = 5;
   */
  message = "";

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 6;
   */
  pageMeta?: PageMeta;

  /**
   * @generated from field: repeated api.asm.v1.Terminal terminal_list = 7;
   */
  terminalList: Terminal[] = [];

  constructor(data?: PartialMessage<QueryTerminalListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryTerminalListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "lot_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "page_meta", kind: "message", T: PageMeta },
    { no: 7, name: "terminal_list", kind: "message", T: Terminal, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTerminalListResponse {
    return new QueryTerminalListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTerminalListResponse {
    return new QueryTerminalListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTerminalListResponse {
    return new QueryTerminalListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTerminalListResponse | PlainMessage<QueryTerminalListResponse> | undefined, b: QueryTerminalListResponse | PlainMessage<QueryTerminalListResponse> | undefined): boolean {
    return proto3.util.equals(QueryTerminalListResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.as.v1.QueryAccountListRequest
 */
export class QueryAccountListRequest extends Message<QueryAccountListRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 ip = 3;
   */
  ip = protoInt64.zero;

  /**
   * @generated from field: int64 lot_id = 4;
   */
  lotId = protoInt64.zero;

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 5;
   */
  pageMeta?: PageMeta;

  constructor(data?: PartialMessage<QueryAccountListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryAccountListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ip", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "lot_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "page_meta", kind: "message", T: PageMeta },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAccountListRequest {
    return new QueryAccountListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAccountListRequest {
    return new QueryAccountListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAccountListRequest {
    return new QueryAccountListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAccountListRequest | PlainMessage<QueryAccountListRequest> | undefined, b: QueryAccountListRequest | PlainMessage<QueryAccountListRequest> | undefined): boolean {
    return proto3.util.equals(QueryAccountListRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.QueryAccountListResponse
 */
export class QueryAccountListResponse extends Message<QueryAccountListResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 lot_id = 3;
   */
  lotId = protoInt64.zero;

  /**
   * @generated from field: bool status = 4;
   */
  status = false;

  /**
   * @generated from field: string message = 5;
   */
  message = "";

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 6;
   */
  pageMeta?: PageMeta;

  /**
   * @generated from field: repeated api.asm.v1.Account account_list = 7;
   */
  accountList: Account[] = [];

  constructor(data?: PartialMessage<QueryAccountListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryAccountListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "lot_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "page_meta", kind: "message", T: PageMeta },
    { no: 7, name: "account_list", kind: "message", T: Account, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAccountListResponse {
    return new QueryAccountListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAccountListResponse {
    return new QueryAccountListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAccountListResponse {
    return new QueryAccountListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAccountListResponse | PlainMessage<QueryAccountListResponse> | undefined, b: QueryAccountListResponse | PlainMessage<QueryAccountListResponse> | undefined): boolean {
    return proto3.util.equals(QueryAccountListResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.as.v1.QueryAccountListByMacLikeRequest
 */
export class QueryAccountListByMacLikeRequest extends Message<QueryAccountListByMacLikeRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 ip = 3;
   */
  ip = protoInt64.zero;

  /**
   * @generated from field: int64 lot_id = 4;
   */
  lotId = protoInt64.zero;

  /**
   * "xx:xx:xx:xx:00:00"
   *
   * @generated from field: string mac_string = 5;
   */
  macString = "";

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 6;
   */
  pageMeta?: PageMeta;

  constructor(data?: PartialMessage<QueryAccountListByMacLikeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryAccountListByMacLikeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ip", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "lot_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "mac_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "page_meta", kind: "message", T: PageMeta },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAccountListByMacLikeRequest {
    return new QueryAccountListByMacLikeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAccountListByMacLikeRequest {
    return new QueryAccountListByMacLikeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAccountListByMacLikeRequest {
    return new QueryAccountListByMacLikeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAccountListByMacLikeRequest | PlainMessage<QueryAccountListByMacLikeRequest> | undefined, b: QueryAccountListByMacLikeRequest | PlainMessage<QueryAccountListByMacLikeRequest> | undefined): boolean {
    return proto3.util.equals(QueryAccountListByMacLikeRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.QueryAccountListByMacLikeResponse
 */
export class QueryAccountListByMacLikeResponse extends Message<QueryAccountListByMacLikeResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 lot_id = 3;
   */
  lotId = protoInt64.zero;

  /**
   * @generated from field: bool status = 4;
   */
  status = false;

  /**
   * @generated from field: string message = 5;
   */
  message = "";

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 6;
   */
  pageMeta?: PageMeta;

  /**
   * @generated from field: repeated api.asm.v1.Account account_list = 7;
   */
  accountList: Account[] = [];

  constructor(data?: PartialMessage<QueryAccountListByMacLikeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryAccountListByMacLikeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "lot_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "page_meta", kind: "message", T: PageMeta },
    { no: 7, name: "account_list", kind: "message", T: Account, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAccountListByMacLikeResponse {
    return new QueryAccountListByMacLikeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAccountListByMacLikeResponse {
    return new QueryAccountListByMacLikeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAccountListByMacLikeResponse {
    return new QueryAccountListByMacLikeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAccountListByMacLikeResponse | PlainMessage<QueryAccountListByMacLikeResponse> | undefined, b: QueryAccountListByMacLikeResponse | PlainMessage<QueryAccountListByMacLikeResponse> | undefined): boolean {
    return proto3.util.equals(QueryAccountListByMacLikeResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.as.v1.QueryTerminalListByMacLikeRequest
 */
export class QueryTerminalListByMacLikeRequest extends Message<QueryTerminalListByMacLikeRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 ip = 3;
   */
  ip = protoInt64.zero;

  /**
   * @generated from field: int64 lot_id = 4;
   */
  lotId = protoInt64.zero;

  /**
   * "xx:xx:xx:xx:00:00"
   *
   * @generated from field: string mac_string = 5;
   */
  macString = "";

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 6;
   */
  pageMeta?: PageMeta;

  constructor(data?: PartialMessage<QueryTerminalListByMacLikeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryTerminalListByMacLikeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ip", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "lot_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "mac_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "page_meta", kind: "message", T: PageMeta },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTerminalListByMacLikeRequest {
    return new QueryTerminalListByMacLikeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTerminalListByMacLikeRequest {
    return new QueryTerminalListByMacLikeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTerminalListByMacLikeRequest {
    return new QueryTerminalListByMacLikeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTerminalListByMacLikeRequest | PlainMessage<QueryTerminalListByMacLikeRequest> | undefined, b: QueryTerminalListByMacLikeRequest | PlainMessage<QueryTerminalListByMacLikeRequest> | undefined): boolean {
    return proto3.util.equals(QueryTerminalListByMacLikeRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.QueryTerminalListByMacLikeResponse
 */
export class QueryTerminalListByMacLikeResponse extends Message<QueryTerminalListByMacLikeResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 lot_id = 3;
   */
  lotId = protoInt64.zero;

  /**
   * @generated from field: bool status = 4;
   */
  status = false;

  /**
   * @generated from field: string message = 5;
   */
  message = "";

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 6;
   */
  pageMeta?: PageMeta;

  /**
   * @generated from field: repeated api.asm.v1.Terminal terminal_list = 7;
   */
  terminalList: Terminal[] = [];

  constructor(data?: PartialMessage<QueryTerminalListByMacLikeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryTerminalListByMacLikeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "lot_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "page_meta", kind: "message", T: PageMeta },
    { no: 7, name: "terminal_list", kind: "message", T: Terminal, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTerminalListByMacLikeResponse {
    return new QueryTerminalListByMacLikeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTerminalListByMacLikeResponse {
    return new QueryTerminalListByMacLikeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTerminalListByMacLikeResponse {
    return new QueryTerminalListByMacLikeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTerminalListByMacLikeResponse | PlainMessage<QueryTerminalListByMacLikeResponse> | undefined, b: QueryTerminalListByMacLikeResponse | PlainMessage<QueryTerminalListByMacLikeResponse> | undefined): boolean {
    return proto3.util.equals(QueryTerminalListByMacLikeResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.as.v1.CountAccountListByMacLikeRequest
 */
export class CountAccountListByMacLikeRequest extends Message<CountAccountListByMacLikeRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 ip = 3;
   */
  ip = protoInt64.zero;

  /**
   * @generated from field: int64 lot_id = 4;
   */
  lotId = protoInt64.zero;

  /**
   * "xx:xx:xx:xx:00:00"
   *
   * @generated from field: string mac_string = 5;
   */
  macString = "";

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 6;
   */
  pageMeta?: PageMeta;

  constructor(data?: PartialMessage<CountAccountListByMacLikeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.CountAccountListByMacLikeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ip", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "lot_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "mac_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "page_meta", kind: "message", T: PageMeta },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountAccountListByMacLikeRequest {
    return new CountAccountListByMacLikeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountAccountListByMacLikeRequest {
    return new CountAccountListByMacLikeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountAccountListByMacLikeRequest {
    return new CountAccountListByMacLikeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CountAccountListByMacLikeRequest | PlainMessage<CountAccountListByMacLikeRequest> | undefined, b: CountAccountListByMacLikeRequest | PlainMessage<CountAccountListByMacLikeRequest> | undefined): boolean {
    return proto3.util.equals(CountAccountListByMacLikeRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.CountAccountListByMacLikeResponse
 */
export class CountAccountListByMacLikeResponse extends Message<CountAccountListByMacLikeResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: int64 lot_id = 5;
   */
  lotId = protoInt64.zero;

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 6;
   */
  pageMeta?: PageMeta;

  constructor(data?: PartialMessage<CountAccountListByMacLikeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.CountAccountListByMacLikeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "lot_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "page_meta", kind: "message", T: PageMeta },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountAccountListByMacLikeResponse {
    return new CountAccountListByMacLikeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountAccountListByMacLikeResponse {
    return new CountAccountListByMacLikeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountAccountListByMacLikeResponse {
    return new CountAccountListByMacLikeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CountAccountListByMacLikeResponse | PlainMessage<CountAccountListByMacLikeResponse> | undefined, b: CountAccountListByMacLikeResponse | PlainMessage<CountAccountListByMacLikeResponse> | undefined): boolean {
    return proto3.util.equals(CountAccountListByMacLikeResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.as.v1.CountTerminalListByMacLikeRequest
 */
export class CountTerminalListByMacLikeRequest extends Message<CountTerminalListByMacLikeRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 ip = 3;
   */
  ip = protoInt64.zero;

  /**
   * @generated from field: int64 lot_id = 4;
   */
  lotId = protoInt64.zero;

  /**
   * "xx:xx:xx:xx:00:00"
   *
   * @generated from field: string mac_string = 5;
   */
  macString = "";

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 6;
   */
  pageMeta?: PageMeta;

  constructor(data?: PartialMessage<CountTerminalListByMacLikeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.CountTerminalListByMacLikeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ip", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "lot_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "mac_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "page_meta", kind: "message", T: PageMeta },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountTerminalListByMacLikeRequest {
    return new CountTerminalListByMacLikeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountTerminalListByMacLikeRequest {
    return new CountTerminalListByMacLikeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountTerminalListByMacLikeRequest {
    return new CountTerminalListByMacLikeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CountTerminalListByMacLikeRequest | PlainMessage<CountTerminalListByMacLikeRequest> | undefined, b: CountTerminalListByMacLikeRequest | PlainMessage<CountTerminalListByMacLikeRequest> | undefined): boolean {
    return proto3.util.equals(CountTerminalListByMacLikeRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.CountTerminalListByMacLikeResponse
 */
export class CountTerminalListByMacLikeResponse extends Message<CountTerminalListByMacLikeResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: int64 lot_id = 4;
   */
  lotId = protoInt64.zero;

  /**
   * @generated from field: string message = 5;
   */
  message = "";

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 6;
   */
  pageMeta?: PageMeta;

  constructor(data?: PartialMessage<CountTerminalListByMacLikeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.CountTerminalListByMacLikeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "lot_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "page_meta", kind: "message", T: PageMeta },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountTerminalListByMacLikeResponse {
    return new CountTerminalListByMacLikeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountTerminalListByMacLikeResponse {
    return new CountTerminalListByMacLikeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountTerminalListByMacLikeResponse {
    return new CountTerminalListByMacLikeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CountTerminalListByMacLikeResponse | PlainMessage<CountTerminalListByMacLikeResponse> | undefined, b: CountTerminalListByMacLikeResponse | PlainMessage<CountTerminalListByMacLikeResponse> | undefined): boolean {
    return proto3.util.equals(CountTerminalListByMacLikeResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.as.v1.UpdateAccountListRequest
 */
export class UpdateAccountListRequest extends Message<UpdateAccountListRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 ip = 3;
   */
  ip = protoInt64.zero;

  /**
   * @generated from field: repeated api.asm.v1.Account account_list = 4;
   */
  accountList: Account[] = [];

  constructor(data?: PartialMessage<UpdateAccountListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.UpdateAccountListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ip", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "account_list", kind: "message", T: Account, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAccountListRequest {
    return new UpdateAccountListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAccountListRequest {
    return new UpdateAccountListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAccountListRequest {
    return new UpdateAccountListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAccountListRequest | PlainMessage<UpdateAccountListRequest> | undefined, b: UpdateAccountListRequest | PlainMessage<UpdateAccountListRequest> | undefined): boolean {
    return proto3.util.equals(UpdateAccountListRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.UpdateAccountListResponse
 */
export class UpdateAccountListResponse extends Message<UpdateAccountListResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: repeated api.asm.v1.Account account_list = 5;
   */
  accountList: Account[] = [];

  constructor(data?: PartialMessage<UpdateAccountListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.UpdateAccountListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "account_list", kind: "message", T: Account, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAccountListResponse {
    return new UpdateAccountListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAccountListResponse {
    return new UpdateAccountListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAccountListResponse {
    return new UpdateAccountListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAccountListResponse | PlainMessage<UpdateAccountListResponse> | undefined, b: UpdateAccountListResponse | PlainMessage<UpdateAccountListResponse> | undefined): boolean {
    return proto3.util.equals(UpdateAccountListResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.as.v1.InsertTerminalListRequest
 */
export class InsertTerminalListRequest extends Message<InsertTerminalListRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 ip = 3;
   */
  ip = protoInt64.zero;

  /**
   * @generated from field: repeated api.asm.v1.Terminal terminal_list = 4;
   */
  terminalList: Terminal[] = [];

  constructor(data?: PartialMessage<InsertTerminalListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.InsertTerminalListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ip", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "terminal_list", kind: "message", T: Terminal, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InsertTerminalListRequest {
    return new InsertTerminalListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InsertTerminalListRequest {
    return new InsertTerminalListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InsertTerminalListRequest {
    return new InsertTerminalListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InsertTerminalListRequest | PlainMessage<InsertTerminalListRequest> | undefined, b: InsertTerminalListRequest | PlainMessage<InsertTerminalListRequest> | undefined): boolean {
    return proto3.util.equals(InsertTerminalListRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.InsertTerminalListResponse
 */
export class InsertTerminalListResponse extends Message<InsertTerminalListResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: repeated api.asm.v1.Terminal terminal_list = 5;
   */
  terminalList: Terminal[] = [];

  constructor(data?: PartialMessage<InsertTerminalListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.InsertTerminalListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "terminal_list", kind: "message", T: Terminal, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InsertTerminalListResponse {
    return new InsertTerminalListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InsertTerminalListResponse {
    return new InsertTerminalListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InsertTerminalListResponse {
    return new InsertTerminalListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InsertTerminalListResponse | PlainMessage<InsertTerminalListResponse> | undefined, b: InsertTerminalListResponse | PlainMessage<InsertTerminalListResponse> | undefined): boolean {
    return proto3.util.equals(InsertTerminalListResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.as.v1.InsertPortalRequest
 */
export class InsertPortalRequest extends Message<InsertPortalRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 ip = 3;
   */
  ip = protoInt64.zero;

  /**
   * @generated from field: api.asm.v1.PortalInfo portal = 4;
   */
  portal?: PortalInfo;

  constructor(data?: PartialMessage<InsertPortalRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.InsertPortalRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ip", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "portal", kind: "message", T: PortalInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InsertPortalRequest {
    return new InsertPortalRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InsertPortalRequest {
    return new InsertPortalRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InsertPortalRequest {
    return new InsertPortalRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InsertPortalRequest | PlainMessage<InsertPortalRequest> | undefined, b: InsertPortalRequest | PlainMessage<InsertPortalRequest> | undefined): boolean {
    return proto3.util.equals(InsertPortalRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.InsertPortalResponse
 */
export class InsertPortalResponse extends Message<InsertPortalResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  constructor(data?: PartialMessage<InsertPortalResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.InsertPortalResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InsertPortalResponse {
    return new InsertPortalResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InsertPortalResponse {
    return new InsertPortalResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InsertPortalResponse {
    return new InsertPortalResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InsertPortalResponse | PlainMessage<InsertPortalResponse> | undefined, b: InsertPortalResponse | PlainMessage<InsertPortalResponse> | undefined): boolean {
    return proto3.util.equals(InsertPortalResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.as.v1.UpdatePortalRequest
 */
export class UpdatePortalRequest extends Message<UpdatePortalRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 ip = 3;
   */
  ip = protoInt64.zero;

  /**
   * @generated from field: api.asm.v1.PortalInfo portal = 4;
   */
  portal?: PortalInfo;

  constructor(data?: PartialMessage<UpdatePortalRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.UpdatePortalRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ip", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "portal", kind: "message", T: PortalInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePortalRequest {
    return new UpdatePortalRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePortalRequest {
    return new UpdatePortalRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePortalRequest {
    return new UpdatePortalRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatePortalRequest | PlainMessage<UpdatePortalRequest> | undefined, b: UpdatePortalRequest | PlainMessage<UpdatePortalRequest> | undefined): boolean {
    return proto3.util.equals(UpdatePortalRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.UpdatePortalResponse
 */
export class UpdatePortalResponse extends Message<UpdatePortalResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  constructor(data?: PartialMessage<UpdatePortalResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.UpdatePortalResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePortalResponse {
    return new UpdatePortalResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePortalResponse {
    return new UpdatePortalResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePortalResponse {
    return new UpdatePortalResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatePortalResponse | PlainMessage<UpdatePortalResponse> | undefined, b: UpdatePortalResponse | PlainMessage<UpdatePortalResponse> | undefined): boolean {
    return proto3.util.equals(UpdatePortalResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.as.v1.ImportLotListRequest
 */
export class ImportLotListRequest extends Message<ImportLotListRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 ip = 3;
   */
  ip = protoInt64.zero;

  /**
   *  用于追踪导入的节点, 这是导入工具的编号
   *
   * @generated from field: int32 import_node_id = 4;
   */
  importNodeId = 0;

  /**
   * @generated from field: repeated api.asm.v1.Distributor import_distributor_list = 5;
   */
  importDistributorList: Distributor[] = [];

  /**
   * @generated from field: repeated api.asm.v1.Lot import_lot_list = 6;
   */
  importLotList: Lot[] = [];

  constructor(data?: PartialMessage<ImportLotListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.ImportLotListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ip", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "import_node_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "import_distributor_list", kind: "message", T: Distributor, repeated: true },
    { no: 6, name: "import_lot_list", kind: "message", T: Lot, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImportLotListRequest {
    return new ImportLotListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImportLotListRequest {
    return new ImportLotListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImportLotListRequest {
    return new ImportLotListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ImportLotListRequest | PlainMessage<ImportLotListRequest> | undefined, b: ImportLotListRequest | PlainMessage<ImportLotListRequest> | undefined): boolean {
    return proto3.util.equals(ImportLotListRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.ImportLotListResponse
 */
export class ImportLotListResponse extends Message<ImportLotListResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: repeated api.asm.v1.Distributor import_distributor_list = 5;
   */
  importDistributorList: Distributor[] = [];

  /**
   * @generated from field: repeated api.asm.v1.Lot import_lot_list = 6;
   */
  importLotList: Lot[] = [];

  constructor(data?: PartialMessage<ImportLotListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.ImportLotListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "import_distributor_list", kind: "message", T: Distributor, repeated: true },
    { no: 6, name: "import_lot_list", kind: "message", T: Lot, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImportLotListResponse {
    return new ImportLotListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImportLotListResponse {
    return new ImportLotListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImportLotListResponse {
    return new ImportLotListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ImportLotListResponse | PlainMessage<ImportLotListResponse> | undefined, b: ImportLotListResponse | PlainMessage<ImportLotListResponse> | undefined): boolean {
    return proto3.util.equals(ImportLotListResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.as.v1.SyncImportTerminalListRequest
 */
export class SyncImportTerminalListRequest extends Message<SyncImportTerminalListRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 ip = 3;
   */
  ip = protoInt64.zero;

  /**
   *  用于追踪导入的节点, 这是导入工具的编号
   *
   * @generated from field: int32 import_node_id = 4;
   */
  importNodeId = 0;

  /**
   * @generated from field: repeated api.asm.v1.ImportTerminal import_terminal_list = 5;
   */
  importTerminalList: ImportTerminal[] = [];

  constructor(data?: PartialMessage<SyncImportTerminalListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.SyncImportTerminalListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ip", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "import_node_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "import_terminal_list", kind: "message", T: ImportTerminal, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyncImportTerminalListRequest {
    return new SyncImportTerminalListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyncImportTerminalListRequest {
    return new SyncImportTerminalListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyncImportTerminalListRequest {
    return new SyncImportTerminalListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SyncImportTerminalListRequest | PlainMessage<SyncImportTerminalListRequest> | undefined, b: SyncImportTerminalListRequest | PlainMessage<SyncImportTerminalListRequest> | undefined): boolean {
    return proto3.util.equals(SyncImportTerminalListRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.SyncImportTerminalListResponse
 */
export class SyncImportTerminalListResponse extends Message<SyncImportTerminalListResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * 本次导入的总数
   *
   * @generated from field: int32 total = 5;
   */
  total = 0;

  /**
   * 本次导入成功的总数
   *
   * @generated from field: int32 success_total = 6;
   */
  successTotal = 0;

  /**
   * 本次导入失败的总数
   *
   * @generated from field: int32 failed_total = 7;
   */
  failedTotal = 0;

  /**
   * 本次导入成功的列表
   *
   * @generated from field: repeated api.asm.v1.ImportTerminal success_terminal_list = 8;
   */
  successTerminalList: ImportTerminal[] = [];

  /**
   * 本次导入失败的列表
   *
   * @generated from field: repeated api.asm.v1.ImportTerminal failed_terminal_list = 9;
   */
  failedTerminalList: ImportTerminal[] = [];

  constructor(data?: PartialMessage<SyncImportTerminalListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.SyncImportTerminalListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "total", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "success_total", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "failed_total", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "success_terminal_list", kind: "message", T: ImportTerminal, repeated: true },
    { no: 9, name: "failed_terminal_list", kind: "message", T: ImportTerminal, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyncImportTerminalListResponse {
    return new SyncImportTerminalListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyncImportTerminalListResponse {
    return new SyncImportTerminalListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyncImportTerminalListResponse {
    return new SyncImportTerminalListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SyncImportTerminalListResponse | PlainMessage<SyncImportTerminalListResponse> | undefined, b: SyncImportTerminalListResponse | PlainMessage<SyncImportTerminalListResponse> | undefined): boolean {
    return proto3.util.equals(SyncImportTerminalListResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.as.v1.UpdateTerminalChipIdentityRequest
 */
export class UpdateTerminalChipIdentityRequest extends Message<UpdateTerminalChipIdentityRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 ip = 3;
   */
  ip = protoInt64.zero;

  /**
   * @generated from field: api.asm.v1.Terminal terminal = 4;
   */
  terminal?: Terminal;

  constructor(data?: PartialMessage<UpdateTerminalChipIdentityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.UpdateTerminalChipIdentityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ip", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "terminal", kind: "message", T: Terminal },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTerminalChipIdentityRequest {
    return new UpdateTerminalChipIdentityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTerminalChipIdentityRequest {
    return new UpdateTerminalChipIdentityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTerminalChipIdentityRequest {
    return new UpdateTerminalChipIdentityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateTerminalChipIdentityRequest | PlainMessage<UpdateTerminalChipIdentityRequest> | undefined, b: UpdateTerminalChipIdentityRequest | PlainMessage<UpdateTerminalChipIdentityRequest> | undefined): boolean {
    return proto3.util.equals(UpdateTerminalChipIdentityRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.UpdateTerminalChipIdentityResponse
 */
export class UpdateTerminalChipIdentityResponse extends Message<UpdateTerminalChipIdentityResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: api.asm.v1.Terminal terminal = 5;
   */
  terminal?: Terminal;

  constructor(data?: PartialMessage<UpdateTerminalChipIdentityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.UpdateTerminalChipIdentityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "terminal", kind: "message", T: Terminal },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTerminalChipIdentityResponse {
    return new UpdateTerminalChipIdentityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTerminalChipIdentityResponse {
    return new UpdateTerminalChipIdentityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTerminalChipIdentityResponse {
    return new UpdateTerminalChipIdentityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateTerminalChipIdentityResponse | PlainMessage<UpdateTerminalChipIdentityResponse> | undefined, b: UpdateTerminalChipIdentityResponse | PlainMessage<UpdateTerminalChipIdentityResponse> | undefined): boolean {
    return proto3.util.equals(UpdateTerminalChipIdentityResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.as.v1.PingRequest
 */
export class PingRequest extends Message<PingRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: string message = 3;
   */
  message = "";

  constructor(data?: PartialMessage<PingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.PingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingRequest {
    return new PingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingRequest {
    return new PingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingRequest {
    return new PingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PingRequest | PlainMessage<PingRequest> | undefined, b: PingRequest | PlainMessage<PingRequest> | undefined): boolean {
    return proto3.util.equals(PingRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.PingResponse
 */
export class PingResponse extends Message<PingResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  constructor(data?: PartialMessage<PingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.PingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingResponse {
    return new PingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingResponse {
    return new PingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingResponse {
    return new PingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PingResponse | PlainMessage<PingResponse> | undefined, b: PingResponse | PlainMessage<PingResponse> | undefined): boolean {
    return proto3.util.equals(PingResponse, a, b);
  }
}

/**
 * @generated from message api.as.v1.QueryIpLimitListRequest
 */
export class QueryIpLimitListRequest extends Message<QueryIpLimitListRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 ip = 3;
   */
  ip = protoInt64.zero;

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 4;
   */
  pageMeta?: PageMeta;

  constructor(data?: PartialMessage<QueryIpLimitListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryIpLimitListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ip", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "page_meta", kind: "message", T: PageMeta },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryIpLimitListRequest {
    return new QueryIpLimitListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryIpLimitListRequest {
    return new QueryIpLimitListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryIpLimitListRequest {
    return new QueryIpLimitListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryIpLimitListRequest | PlainMessage<QueryIpLimitListRequest> | undefined, b: QueryIpLimitListRequest | PlainMessage<QueryIpLimitListRequest> | undefined): boolean {
    return proto3.util.equals(QueryIpLimitListRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.QueryIpLimitListResponse
 */
export class QueryIpLimitListResponse extends Message<QueryIpLimitListResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: repeated api.asm.v1.IpLimit ip_limit_list = 5;
   */
  ipLimitList: IpLimit[] = [];

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 6;
   */
  pageMeta?: PageMeta;

  constructor(data?: PartialMessage<QueryIpLimitListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryIpLimitListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "ip_limit_list", kind: "message", T: IpLimit, repeated: true },
    { no: 6, name: "page_meta", kind: "message", T: PageMeta },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryIpLimitListResponse {
    return new QueryIpLimitListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryIpLimitListResponse {
    return new QueryIpLimitListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryIpLimitListResponse {
    return new QueryIpLimitListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryIpLimitListResponse | PlainMessage<QueryIpLimitListResponse> | undefined, b: QueryIpLimitListResponse | PlainMessage<QueryIpLimitListResponse> | undefined): boolean {
    return proto3.util.equals(QueryIpLimitListResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.as.v1.InsertIpLimitListRequest
 */
export class InsertIpLimitListRequest extends Message<InsertIpLimitListRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 ip = 3;
   */
  ip = protoInt64.zero;

  /**
   * @generated from field: api.asm.v1.IpLimit ip_limit = 4;
   */
  ipLimit?: IpLimit;

  constructor(data?: PartialMessage<InsertIpLimitListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.InsertIpLimitListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ip", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "ip_limit", kind: "message", T: IpLimit },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InsertIpLimitListRequest {
    return new InsertIpLimitListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InsertIpLimitListRequest {
    return new InsertIpLimitListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InsertIpLimitListRequest {
    return new InsertIpLimitListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InsertIpLimitListRequest | PlainMessage<InsertIpLimitListRequest> | undefined, b: InsertIpLimitListRequest | PlainMessage<InsertIpLimitListRequest> | undefined): boolean {
    return proto3.util.equals(InsertIpLimitListRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.InsertIpLimitListResponse
 */
export class InsertIpLimitListResponse extends Message<InsertIpLimitListResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: api.asm.v1.IpLimit ip_limit = 5;
   */
  ipLimit?: IpLimit;

  constructor(data?: PartialMessage<InsertIpLimitListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.InsertIpLimitListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "ip_limit", kind: "message", T: IpLimit },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InsertIpLimitListResponse {
    return new InsertIpLimitListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InsertIpLimitListResponse {
    return new InsertIpLimitListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InsertIpLimitListResponse {
    return new InsertIpLimitListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InsertIpLimitListResponse | PlainMessage<InsertIpLimitListResponse> | undefined, b: InsertIpLimitListResponse | PlainMessage<InsertIpLimitListResponse> | undefined): boolean {
    return proto3.util.equals(InsertIpLimitListResponse, a, b);
  }
}

/**
 * @generated from message api.as.v1.SyncTerminalListToCacheRequest
 */
export class SyncTerminalListToCacheRequest extends Message<SyncTerminalListToCacheRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 source_ip = 3;
   */
  sourceIp = protoInt64.zero;

  /**
   * @generated from field: repeated api.asm.v1.Terminal terminal_list = 4;
   */
  terminalList: Terminal[] = [];

  constructor(data?: PartialMessage<SyncTerminalListToCacheRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.SyncTerminalListToCacheRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "source_ip", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "terminal_list", kind: "message", T: Terminal, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyncTerminalListToCacheRequest {
    return new SyncTerminalListToCacheRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyncTerminalListToCacheRequest {
    return new SyncTerminalListToCacheRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyncTerminalListToCacheRequest {
    return new SyncTerminalListToCacheRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SyncTerminalListToCacheRequest | PlainMessage<SyncTerminalListToCacheRequest> | undefined, b: SyncTerminalListToCacheRequest | PlainMessage<SyncTerminalListToCacheRequest> | undefined): boolean {
    return proto3.util.equals(SyncTerminalListToCacheRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.SyncTerminalListToCacheResponse
 */
export class SyncTerminalListToCacheResponse extends Message<SyncTerminalListToCacheResponse> {
  /**
   * @generated from field: bool status = 1;
   */
  status = false;

  /**
   * @generated from field: int32 status_code = 2;
   */
  statusCode = 0;

  /**
   * @generated from field: int64 transaction_id = 3;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 4;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: string msg = 5;
   */
  msg = "";

  constructor(data?: PartialMessage<SyncTerminalListToCacheResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.SyncTerminalListToCacheResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "status_code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyncTerminalListToCacheResponse {
    return new SyncTerminalListToCacheResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyncTerminalListToCacheResponse {
    return new SyncTerminalListToCacheResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyncTerminalListToCacheResponse {
    return new SyncTerminalListToCacheResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SyncTerminalListToCacheResponse | PlainMessage<SyncTerminalListToCacheResponse> | undefined, b: SyncTerminalListToCacheResponse | PlainMessage<SyncTerminalListToCacheResponse> | undefined): boolean {
    return proto3.util.equals(SyncTerminalListToCacheResponse, a, b);
  }
}

/**
 * @generated from message api.as.v1.SyncAccountListToCacheRequest
 */
export class SyncAccountListToCacheRequest extends Message<SyncAccountListToCacheRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 source_ip = 3;
   */
  sourceIp = protoInt64.zero;

  /**
   * @generated from field: repeated api.asm.v1.Account account_list = 4;
   */
  accountList: Account[] = [];

  constructor(data?: PartialMessage<SyncAccountListToCacheRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.SyncAccountListToCacheRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "source_ip", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "account_list", kind: "message", T: Account, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyncAccountListToCacheRequest {
    return new SyncAccountListToCacheRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyncAccountListToCacheRequest {
    return new SyncAccountListToCacheRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyncAccountListToCacheRequest {
    return new SyncAccountListToCacheRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SyncAccountListToCacheRequest | PlainMessage<SyncAccountListToCacheRequest> | undefined, b: SyncAccountListToCacheRequest | PlainMessage<SyncAccountListToCacheRequest> | undefined): boolean {
    return proto3.util.equals(SyncAccountListToCacheRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.SyncAccountListToCacheResponse
 */
export class SyncAccountListToCacheResponse extends Message<SyncAccountListToCacheResponse> {
  /**
   * @generated from field: bool status = 1;
   */
  status = false;

  /**
   * @generated from field: int32 status_code = 2;
   */
  statusCode = 0;

  /**
   * @generated from field: int64 transaction_id = 3;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 4;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: string msg = 5;
   */
  msg = "";

  constructor(data?: PartialMessage<SyncAccountListToCacheResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.SyncAccountListToCacheResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "status_code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyncAccountListToCacheResponse {
    return new SyncAccountListToCacheResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyncAccountListToCacheResponse {
    return new SyncAccountListToCacheResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyncAccountListToCacheResponse {
    return new SyncAccountListToCacheResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SyncAccountListToCacheResponse | PlainMessage<SyncAccountListToCacheResponse> | undefined, b: SyncAccountListToCacheResponse | PlainMessage<SyncAccountListToCacheResponse> | undefined): boolean {
    return proto3.util.equals(SyncAccountListToCacheResponse, a, b);
  }
}

/**
 * @generated from message api.as.v1.SyncIpLimitListToCacheRequest
 */
export class SyncIpLimitListToCacheRequest extends Message<SyncIpLimitListToCacheRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 source_ip = 3;
   */
  sourceIp = protoInt64.zero;

  /**
   * @generated from field: repeated api.asm.v1.IpLimit ip_limit_list = 4;
   */
  ipLimitList: IpLimit[] = [];

  constructor(data?: PartialMessage<SyncIpLimitListToCacheRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.SyncIpLimitListToCacheRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "source_ip", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "ip_limit_list", kind: "message", T: IpLimit, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyncIpLimitListToCacheRequest {
    return new SyncIpLimitListToCacheRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyncIpLimitListToCacheRequest {
    return new SyncIpLimitListToCacheRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyncIpLimitListToCacheRequest {
    return new SyncIpLimitListToCacheRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SyncIpLimitListToCacheRequest | PlainMessage<SyncIpLimitListToCacheRequest> | undefined, b: SyncIpLimitListToCacheRequest | PlainMessage<SyncIpLimitListToCacheRequest> | undefined): boolean {
    return proto3.util.equals(SyncIpLimitListToCacheRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.SyncIpLimitListToCacheResponse
 */
export class SyncIpLimitListToCacheResponse extends Message<SyncIpLimitListToCacheResponse> {
  /**
   * @generated from field: bool status = 1;
   */
  status = false;

  /**
   * @generated from field: int32 status_code = 2;
   */
  statusCode = 0;

  /**
   * @generated from field: int64 transaction_id = 3;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 4;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: string msg = 5;
   */
  msg = "";

  constructor(data?: PartialMessage<SyncIpLimitListToCacheResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.SyncIpLimitListToCacheResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "status_code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyncIpLimitListToCacheResponse {
    return new SyncIpLimitListToCacheResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyncIpLimitListToCacheResponse {
    return new SyncIpLimitListToCacheResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyncIpLimitListToCacheResponse {
    return new SyncIpLimitListToCacheResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SyncIpLimitListToCacheResponse | PlainMessage<SyncIpLimitListToCacheResponse> | undefined, b: SyncIpLimitListToCacheResponse | PlainMessage<SyncIpLimitListToCacheResponse> | undefined): boolean {
    return proto3.util.equals(SyncIpLimitListToCacheResponse, a, b);
  }
}

/**
 * --------------jeffery--------------------
 *
 * @generated from message api.as.v1.QueryAccountInfoListRequest
 */
export class QueryAccountInfoListRequest extends Message<QueryAccountInfoListRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 3;
   */
  pageMeta?: PageMeta;

  /**
   * @generated from field: api.asm.v1.AccountFilter account_filter = 4;
   */
  accountFilter?: AccountFilter;

  constructor(data?: PartialMessage<QueryAccountInfoListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryAccountInfoListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "page_meta", kind: "message", T: PageMeta },
    { no: 4, name: "account_filter", kind: "message", T: AccountFilter },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAccountInfoListRequest {
    return new QueryAccountInfoListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAccountInfoListRequest {
    return new QueryAccountInfoListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAccountInfoListRequest {
    return new QueryAccountInfoListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAccountInfoListRequest | PlainMessage<QueryAccountInfoListRequest> | undefined, b: QueryAccountInfoListRequest | PlainMessage<QueryAccountInfoListRequest> | undefined): boolean {
    return proto3.util.equals(QueryAccountInfoListRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.QueryAccountInfoListResponse
 */
export class QueryAccountInfoListResponse extends Message<QueryAccountInfoListResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 5;
   */
  pageMeta?: PageMeta;

  /**
   * @generated from field: repeated api.asm.v1.AccountInfo account_list = 6;
   */
  accountList: AccountInfo[] = [];

  constructor(data?: PartialMessage<QueryAccountInfoListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryAccountInfoListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "page_meta", kind: "message", T: PageMeta },
    { no: 6, name: "account_list", kind: "message", T: AccountInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAccountInfoListResponse {
    return new QueryAccountInfoListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAccountInfoListResponse {
    return new QueryAccountInfoListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAccountInfoListResponse {
    return new QueryAccountInfoListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAccountInfoListResponse | PlainMessage<QueryAccountInfoListResponse> | undefined, b: QueryAccountInfoListResponse | PlainMessage<QueryAccountInfoListResponse> | undefined): boolean {
    return proto3.util.equals(QueryAccountInfoListResponse, a, b);
  }
}

/**
 * @generated from message api.as.v1.UpdateAccountInfoRequest
 */
export class UpdateAccountInfoRequest extends Message<UpdateAccountInfoRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: api.asm.v1.AccountInfo account = 3;
   */
  account?: AccountInfo;

  constructor(data?: PartialMessage<UpdateAccountInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.UpdateAccountInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "account", kind: "message", T: AccountInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAccountInfoRequest {
    return new UpdateAccountInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAccountInfoRequest {
    return new UpdateAccountInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAccountInfoRequest {
    return new UpdateAccountInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAccountInfoRequest | PlainMessage<UpdateAccountInfoRequest> | undefined, b: UpdateAccountInfoRequest | PlainMessage<UpdateAccountInfoRequest> | undefined): boolean {
    return proto3.util.equals(UpdateAccountInfoRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.UpdateAccountInfoResponse
 */
export class UpdateAccountInfoResponse extends Message<UpdateAccountInfoResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  constructor(data?: PartialMessage<UpdateAccountInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.UpdateAccountInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAccountInfoResponse {
    return new UpdateAccountInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAccountInfoResponse {
    return new UpdateAccountInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAccountInfoResponse {
    return new UpdateAccountInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAccountInfoResponse | PlainMessage<UpdateAccountInfoResponse> | undefined, b: UpdateAccountInfoResponse | PlainMessage<UpdateAccountInfoResponse> | undefined): boolean {
    return proto3.util.equals(UpdateAccountInfoResponse, a, b);
  }
}

/**
 * @generated from message api.as.v1.DeleteAccountInfoListRequest
 */
export class DeleteAccountInfoListRequest extends Message<DeleteAccountInfoListRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: repeated string account_id = 3;
   */
  accountId: string[] = [];

  constructor(data?: PartialMessage<DeleteAccountInfoListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.DeleteAccountInfoListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAccountInfoListRequest {
    return new DeleteAccountInfoListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAccountInfoListRequest {
    return new DeleteAccountInfoListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAccountInfoListRequest {
    return new DeleteAccountInfoListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAccountInfoListRequest | PlainMessage<DeleteAccountInfoListRequest> | undefined, b: DeleteAccountInfoListRequest | PlainMessage<DeleteAccountInfoListRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAccountInfoListRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.DeleteAccountInfoListResponse
 */
export class DeleteAccountInfoListResponse extends Message<DeleteAccountInfoListResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  constructor(data?: PartialMessage<DeleteAccountInfoListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.DeleteAccountInfoListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAccountInfoListResponse {
    return new DeleteAccountInfoListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAccountInfoListResponse {
    return new DeleteAccountInfoListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAccountInfoListResponse {
    return new DeleteAccountInfoListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAccountInfoListResponse | PlainMessage<DeleteAccountInfoListResponse> | undefined, b: DeleteAccountInfoListResponse | PlainMessage<DeleteAccountInfoListResponse> | undefined): boolean {
    return proto3.util.equals(DeleteAccountInfoListResponse, a, b);
  }
}

/**
 * @generated from message api.as.v1.UpdateAccountInfoListStatusRequest
 */
export class UpdateAccountInfoListStatusRequest extends Message<UpdateAccountInfoListStatusRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: string distributor_id = 3;
   */
  distributorId = "";

  /**
   * @generated from field: string lot_id = 4;
   */
  lotId = "";

  /**
   * @generated from field: bool is_active = 5;
   */
  isActive = false;

  /**
   * @generated from field: bool is_service = 6;
   */
  isService = false;

  /**
   * @generated from field: bool store_auth = 7;
   */
  storeAuth = false;

  constructor(data?: PartialMessage<UpdateAccountInfoListStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.UpdateAccountInfoListStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "distributor_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "lot_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "is_service", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "store_auth", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAccountInfoListStatusRequest {
    return new UpdateAccountInfoListStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAccountInfoListStatusRequest {
    return new UpdateAccountInfoListStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAccountInfoListStatusRequest {
    return new UpdateAccountInfoListStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAccountInfoListStatusRequest | PlainMessage<UpdateAccountInfoListStatusRequest> | undefined, b: UpdateAccountInfoListStatusRequest | PlainMessage<UpdateAccountInfoListStatusRequest> | undefined): boolean {
    return proto3.util.equals(UpdateAccountInfoListStatusRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.UpdateAccountInfoListStatusResponse
 */
export class UpdateAccountInfoListStatusResponse extends Message<UpdateAccountInfoListStatusResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  constructor(data?: PartialMessage<UpdateAccountInfoListStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.UpdateAccountInfoListStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAccountInfoListStatusResponse {
    return new UpdateAccountInfoListStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAccountInfoListStatusResponse {
    return new UpdateAccountInfoListStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAccountInfoListStatusResponse {
    return new UpdateAccountInfoListStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAccountInfoListStatusResponse | PlainMessage<UpdateAccountInfoListStatusResponse> | undefined, b: UpdateAccountInfoListStatusResponse | PlainMessage<UpdateAccountInfoListStatusResponse> | undefined): boolean {
    return proto3.util.equals(UpdateAccountInfoListStatusResponse, a, b);
  }
}

/**
 * @generated from message api.as.v1.ExportAccountInfoListRequest
 */
export class ExportAccountInfoListRequest extends Message<ExportAccountInfoListRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: api.asm.v1.AccountFilter account_filter = 4;
   */
  accountFilter?: AccountFilter;

  constructor(data?: PartialMessage<ExportAccountInfoListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.ExportAccountInfoListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "account_filter", kind: "message", T: AccountFilter },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExportAccountInfoListRequest {
    return new ExportAccountInfoListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExportAccountInfoListRequest {
    return new ExportAccountInfoListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExportAccountInfoListRequest {
    return new ExportAccountInfoListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExportAccountInfoListRequest | PlainMessage<ExportAccountInfoListRequest> | undefined, b: ExportAccountInfoListRequest | PlainMessage<ExportAccountInfoListRequest> | undefined): boolean {
    return proto3.util.equals(ExportAccountInfoListRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.ExportAccountInfoListResponse
 */
export class ExportAccountInfoListResponse extends Message<ExportAccountInfoListResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: string path = 6;
   */
  path = "";

  constructor(data?: PartialMessage<ExportAccountInfoListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.ExportAccountInfoListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExportAccountInfoListResponse {
    return new ExportAccountInfoListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExportAccountInfoListResponse {
    return new ExportAccountInfoListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExportAccountInfoListResponse {
    return new ExportAccountInfoListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ExportAccountInfoListResponse | PlainMessage<ExportAccountInfoListResponse> | undefined, b: ExportAccountInfoListResponse | PlainMessage<ExportAccountInfoListResponse> | undefined): boolean {
    return proto3.util.equals(ExportAccountInfoListResponse, a, b);
  }
}

/**
 * @generated from message api.as.v1.UpdateTerminalInfoListStatusRequest
 */
export class UpdateTerminalInfoListStatusRequest extends Message<UpdateTerminalInfoListStatusRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: string distributor_id = 3;
   */
  distributorId = "";

  /**
   * @generated from field: string lot_id = 4;
   */
  lotId = "";

  /**
   * @generated from field: bool set_active = 5;
   */
  setActive = false;

  /**
   * @generated from field: bool set_service = 6;
   */
  setService = false;

  /**
   * @generated from field: bool store_auth = 7;
   */
  storeAuth = false;

  constructor(data?: PartialMessage<UpdateTerminalInfoListStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.UpdateTerminalInfoListStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "distributor_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "lot_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "set_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "set_service", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "store_auth", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTerminalInfoListStatusRequest {
    return new UpdateTerminalInfoListStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTerminalInfoListStatusRequest {
    return new UpdateTerminalInfoListStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTerminalInfoListStatusRequest {
    return new UpdateTerminalInfoListStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateTerminalInfoListStatusRequest | PlainMessage<UpdateTerminalInfoListStatusRequest> | undefined, b: UpdateTerminalInfoListStatusRequest | PlainMessage<UpdateTerminalInfoListStatusRequest> | undefined): boolean {
    return proto3.util.equals(UpdateTerminalInfoListStatusRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.UpdateTerminalInfoListStatusResponse
 */
export class UpdateTerminalInfoListStatusResponse extends Message<UpdateTerminalInfoListStatusResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  constructor(data?: PartialMessage<UpdateTerminalInfoListStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.UpdateTerminalInfoListStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTerminalInfoListStatusResponse {
    return new UpdateTerminalInfoListStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTerminalInfoListStatusResponse {
    return new UpdateTerminalInfoListStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTerminalInfoListStatusResponse {
    return new UpdateTerminalInfoListStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateTerminalInfoListStatusResponse | PlainMessage<UpdateTerminalInfoListStatusResponse> | undefined, b: UpdateTerminalInfoListStatusResponse | PlainMessage<UpdateTerminalInfoListStatusResponse> | undefined): boolean {
    return proto3.util.equals(UpdateTerminalInfoListStatusResponse, a, b);
  }
}

/**
 * @generated from message api.as.v1.InsertTerminalInfoRequest
 */
export class InsertTerminalInfoRequest extends Message<InsertTerminalInfoRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: api.asm.v1.TerminalInfo terminal = 3;
   */
  terminal?: TerminalInfo;

  constructor(data?: PartialMessage<InsertTerminalInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.InsertTerminalInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "terminal", kind: "message", T: TerminalInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InsertTerminalInfoRequest {
    return new InsertTerminalInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InsertTerminalInfoRequest {
    return new InsertTerminalInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InsertTerminalInfoRequest {
    return new InsertTerminalInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InsertTerminalInfoRequest | PlainMessage<InsertTerminalInfoRequest> | undefined, b: InsertTerminalInfoRequest | PlainMessage<InsertTerminalInfoRequest> | undefined): boolean {
    return proto3.util.equals(InsertTerminalInfoRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.InsertTerminalInfoResponse
 */
export class InsertTerminalInfoResponse extends Message<InsertTerminalInfoResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  constructor(data?: PartialMessage<InsertTerminalInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.InsertTerminalInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InsertTerminalInfoResponse {
    return new InsertTerminalInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InsertTerminalInfoResponse {
    return new InsertTerminalInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InsertTerminalInfoResponse {
    return new InsertTerminalInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InsertTerminalInfoResponse | PlainMessage<InsertTerminalInfoResponse> | undefined, b: InsertTerminalInfoResponse | PlainMessage<InsertTerminalInfoResponse> | undefined): boolean {
    return proto3.util.equals(InsertTerminalInfoResponse, a, b);
  }
}

/**
 * @generated from message api.as.v1.QueryTerminalInfoListRequest
 */
export class QueryTerminalInfoListRequest extends Message<QueryTerminalInfoListRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 3;
   */
  pageMeta?: PageMeta;

  /**
   * @generated from field: api.asm.v1.TerminalFilter terminal_filter = 4;
   */
  terminalFilter?: TerminalFilter;

  constructor(data?: PartialMessage<QueryTerminalInfoListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryTerminalInfoListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "page_meta", kind: "message", T: PageMeta },
    { no: 4, name: "terminal_filter", kind: "message", T: TerminalFilter },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTerminalInfoListRequest {
    return new QueryTerminalInfoListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTerminalInfoListRequest {
    return new QueryTerminalInfoListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTerminalInfoListRequest {
    return new QueryTerminalInfoListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTerminalInfoListRequest | PlainMessage<QueryTerminalInfoListRequest> | undefined, b: QueryTerminalInfoListRequest | PlainMessage<QueryTerminalInfoListRequest> | undefined): boolean {
    return proto3.util.equals(QueryTerminalInfoListRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.QueryTerminalInfoListResponse
 */
export class QueryTerminalInfoListResponse extends Message<QueryTerminalInfoListResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 5;
   */
  pageMeta?: PageMeta;

  /**
   * @generated from field: repeated api.asm.v1.TerminalInfo terminal_list = 6;
   */
  terminalList: TerminalInfo[] = [];

  constructor(data?: PartialMessage<QueryTerminalInfoListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryTerminalInfoListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "page_meta", kind: "message", T: PageMeta },
    { no: 6, name: "terminal_list", kind: "message", T: TerminalInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTerminalInfoListResponse {
    return new QueryTerminalInfoListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTerminalInfoListResponse {
    return new QueryTerminalInfoListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTerminalInfoListResponse {
    return new QueryTerminalInfoListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTerminalInfoListResponse | PlainMessage<QueryTerminalInfoListResponse> | undefined, b: QueryTerminalInfoListResponse | PlainMessage<QueryTerminalInfoListResponse> | undefined): boolean {
    return proto3.util.equals(QueryTerminalInfoListResponse, a, b);
  }
}

/**
 * @generated from message api.as.v1.UpdateTerminalInfoRequest
 */
export class UpdateTerminalInfoRequest extends Message<UpdateTerminalInfoRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: api.asm.v1.TerminalInfo terminal = 3;
   */
  terminal?: TerminalInfo;

  constructor(data?: PartialMessage<UpdateTerminalInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.UpdateTerminalInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "terminal", kind: "message", T: TerminalInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTerminalInfoRequest {
    return new UpdateTerminalInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTerminalInfoRequest {
    return new UpdateTerminalInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTerminalInfoRequest {
    return new UpdateTerminalInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateTerminalInfoRequest | PlainMessage<UpdateTerminalInfoRequest> | undefined, b: UpdateTerminalInfoRequest | PlainMessage<UpdateTerminalInfoRequest> | undefined): boolean {
    return proto3.util.equals(UpdateTerminalInfoRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.UpdateTerminalInfoResponse
 */
export class UpdateTerminalInfoResponse extends Message<UpdateTerminalInfoResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  constructor(data?: PartialMessage<UpdateTerminalInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.UpdateTerminalInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTerminalInfoResponse {
    return new UpdateTerminalInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTerminalInfoResponse {
    return new UpdateTerminalInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTerminalInfoResponse {
    return new UpdateTerminalInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateTerminalInfoResponse | PlainMessage<UpdateTerminalInfoResponse> | undefined, b: UpdateTerminalInfoResponse | PlainMessage<UpdateTerminalInfoResponse> | undefined): boolean {
    return proto3.util.equals(UpdateTerminalInfoResponse, a, b);
  }
}

/**
 * @generated from message api.as.v1.DeleteTerminalInfoListRequest
 */
export class DeleteTerminalInfoListRequest extends Message<DeleteTerminalInfoListRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: repeated string terminal_ids = 3;
   */
  terminalIds: string[] = [];

  constructor(data?: PartialMessage<DeleteTerminalInfoListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.DeleteTerminalInfoListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "terminal_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTerminalInfoListRequest {
    return new DeleteTerminalInfoListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTerminalInfoListRequest {
    return new DeleteTerminalInfoListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTerminalInfoListRequest {
    return new DeleteTerminalInfoListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteTerminalInfoListRequest | PlainMessage<DeleteTerminalInfoListRequest> | undefined, b: DeleteTerminalInfoListRequest | PlainMessage<DeleteTerminalInfoListRequest> | undefined): boolean {
    return proto3.util.equals(DeleteTerminalInfoListRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.DeleteTerminalInfoListResponse
 */
export class DeleteTerminalInfoListResponse extends Message<DeleteTerminalInfoListResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  constructor(data?: PartialMessage<DeleteTerminalInfoListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.DeleteTerminalInfoListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTerminalInfoListResponse {
    return new DeleteTerminalInfoListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTerminalInfoListResponse {
    return new DeleteTerminalInfoListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTerminalInfoListResponse {
    return new DeleteTerminalInfoListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteTerminalInfoListResponse | PlainMessage<DeleteTerminalInfoListResponse> | undefined, b: DeleteTerminalInfoListResponse | PlainMessage<DeleteTerminalInfoListResponse> | undefined): boolean {
    return proto3.util.equals(DeleteTerminalInfoListResponse, a, b);
  }
}

/**
 * @generated from message api.as.v1.ExportTerminalInfoListRequest
 */
export class ExportTerminalInfoListRequest extends Message<ExportTerminalInfoListRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: api.asm.v1.TerminalFilter terminal_filter = 4;
   */
  terminalFilter?: TerminalFilter;

  constructor(data?: PartialMessage<ExportTerminalInfoListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.ExportTerminalInfoListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "terminal_filter", kind: "message", T: TerminalFilter },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExportTerminalInfoListRequest {
    return new ExportTerminalInfoListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExportTerminalInfoListRequest {
    return new ExportTerminalInfoListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExportTerminalInfoListRequest {
    return new ExportTerminalInfoListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExportTerminalInfoListRequest | PlainMessage<ExportTerminalInfoListRequest> | undefined, b: ExportTerminalInfoListRequest | PlainMessage<ExportTerminalInfoListRequest> | undefined): boolean {
    return proto3.util.equals(ExportTerminalInfoListRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.ExportTerminalInfoListResponse
 */
export class ExportTerminalInfoListResponse extends Message<ExportTerminalInfoListResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: string path = 5;
   */
  path = "";

  constructor(data?: PartialMessage<ExportTerminalInfoListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.ExportTerminalInfoListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExportTerminalInfoListResponse {
    return new ExportTerminalInfoListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExportTerminalInfoListResponse {
    return new ExportTerminalInfoListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExportTerminalInfoListResponse {
    return new ExportTerminalInfoListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ExportTerminalInfoListResponse | PlainMessage<ExportTerminalInfoListResponse> | undefined, b: ExportTerminalInfoListResponse | PlainMessage<ExportTerminalInfoListResponse> | undefined): boolean {
    return proto3.util.equals(ExportTerminalInfoListResponse, a, b);
  }
}

/**
 * @generated from message api.as.v1.QueryAllDistributorLotRequest
 */
export class QueryAllDistributorLotRequest extends Message<QueryAllDistributorLotRequest> {
  constructor(data?: PartialMessage<QueryAllDistributorLotRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryAllDistributorLotRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllDistributorLotRequest {
    return new QueryAllDistributorLotRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllDistributorLotRequest {
    return new QueryAllDistributorLotRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllDistributorLotRequest {
    return new QueryAllDistributorLotRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllDistributorLotRequest | PlainMessage<QueryAllDistributorLotRequest> | undefined, b: QueryAllDistributorLotRequest | PlainMessage<QueryAllDistributorLotRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllDistributorLotRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.QueryAllDistributorLotResponse
 */
export class QueryAllDistributorLotResponse extends Message<QueryAllDistributorLotResponse> {
  /**
   * @generated from field: bool status = 1;
   */
  status = false;

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  /**
   * @generated from field: repeated api.asm.v1.DistributorLabel distributor_list = 3;
   */
  distributorList: DistributorLabel[] = [];

  /**
   * @generated from field: repeated api.asm.v1.LotLabel lot_list = 4;
   */
  lotList: LotLabel[] = [];

  constructor(data?: PartialMessage<QueryAllDistributorLotResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryAllDistributorLotResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "distributor_list", kind: "message", T: DistributorLabel, repeated: true },
    { no: 4, name: "lot_list", kind: "message", T: LotLabel, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllDistributorLotResponse {
    return new QueryAllDistributorLotResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllDistributorLotResponse {
    return new QueryAllDistributorLotResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllDistributorLotResponse {
    return new QueryAllDistributorLotResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllDistributorLotResponse | PlainMessage<QueryAllDistributorLotResponse> | undefined, b: QueryAllDistributorLotResponse | PlainMessage<QueryAllDistributorLotResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllDistributorLotResponse, a, b);
  }
}

/**
 * @generated from message api.as.v1.QueryAllLotRequest
 */
export class QueryAllLotRequest extends Message<QueryAllLotRequest> {
  /**
   * @generated from field: string distributor_id = 1;
   */
  distributorId = "";

  constructor(data?: PartialMessage<QueryAllLotRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryAllLotRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "distributor_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllLotRequest {
    return new QueryAllLotRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllLotRequest {
    return new QueryAllLotRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllLotRequest {
    return new QueryAllLotRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllLotRequest | PlainMessage<QueryAllLotRequest> | undefined, b: QueryAllLotRequest | PlainMessage<QueryAllLotRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllLotRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.QueryAllLotResponse
 */
export class QueryAllLotResponse extends Message<QueryAllLotResponse> {
  /**
   * @generated from field: bool status = 1;
   */
  status = false;

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  /**
   * @generated from field: repeated api.asm.v1.LotValueLabel lot_list = 3;
   */
  lotList: LotValueLabel[] = [];

  constructor(data?: PartialMessage<QueryAllLotResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryAllLotResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "lot_list", kind: "message", T: LotValueLabel, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllLotResponse {
    return new QueryAllLotResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllLotResponse {
    return new QueryAllLotResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllLotResponse {
    return new QueryAllLotResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllLotResponse | PlainMessage<QueryAllLotResponse> | undefined, b: QueryAllLotResponse | PlainMessage<QueryAllLotResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllLotResponse, a, b);
  }
}

/**
 * @generated from message api.as.v1.DeletePortalRequest
 */
export class DeletePortalRequest extends Message<DeletePortalRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: api.asm.v1.PortalInfo portal = 3;
   */
  portal?: PortalInfo;

  constructor(data?: PartialMessage<DeletePortalRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.DeletePortalRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "portal", kind: "message", T: PortalInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePortalRequest {
    return new DeletePortalRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePortalRequest {
    return new DeletePortalRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePortalRequest {
    return new DeletePortalRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeletePortalRequest | PlainMessage<DeletePortalRequest> | undefined, b: DeletePortalRequest | PlainMessage<DeletePortalRequest> | undefined): boolean {
    return proto3.util.equals(DeletePortalRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.DeletePortalResponse
 */
export class DeletePortalResponse extends Message<DeletePortalResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  constructor(data?: PartialMessage<DeletePortalResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.DeletePortalResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePortalResponse {
    return new DeletePortalResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePortalResponse {
    return new DeletePortalResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePortalResponse {
    return new DeletePortalResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeletePortalResponse | PlainMessage<DeletePortalResponse> | undefined, b: DeletePortalResponse | PlainMessage<DeletePortalResponse> | undefined): boolean {
    return proto3.util.equals(DeletePortalResponse, a, b);
  }
}

/**
 * @generated from message api.as.v1.QueryServerListRequest
 */
export class QueryServerListRequest extends Message<QueryServerListRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 5;
   */
  pageMeta?: PageMeta;

  constructor(data?: PartialMessage<QueryServerListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryServerListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "page_meta", kind: "message", T: PageMeta },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServerListRequest {
    return new QueryServerListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServerListRequest {
    return new QueryServerListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServerListRequest {
    return new QueryServerListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServerListRequest | PlainMessage<QueryServerListRequest> | undefined, b: QueryServerListRequest | PlainMessage<QueryServerListRequest> | undefined): boolean {
    return proto3.util.equals(QueryServerListRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.QueryServerListResponse
 */
export class QueryServerListResponse extends Message<QueryServerListResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 5;
   */
  pageMeta?: PageMeta;

  /**
   * @generated from field: repeated api.asm.v1.Server server_list = 6;
   */
  serverList: Server[] = [];

  constructor(data?: PartialMessage<QueryServerListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryServerListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "page_meta", kind: "message", T: PageMeta },
    { no: 6, name: "server_list", kind: "message", T: Server, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServerListResponse {
    return new QueryServerListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServerListResponse {
    return new QueryServerListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServerListResponse {
    return new QueryServerListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServerListResponse | PlainMessage<QueryServerListResponse> | undefined, b: QueryServerListResponse | PlainMessage<QueryServerListResponse> | undefined): boolean {
    return proto3.util.equals(QueryServerListResponse, a, b);
  }
}

/**
 * @generated from message api.as.v1.InsertServerRequest
 */
export class InsertServerRequest extends Message<InsertServerRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: api.asm.v1.Server server = 3;
   */
  server?: Server;

  constructor(data?: PartialMessage<InsertServerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.InsertServerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "server", kind: "message", T: Server },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InsertServerRequest {
    return new InsertServerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InsertServerRequest {
    return new InsertServerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InsertServerRequest {
    return new InsertServerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InsertServerRequest | PlainMessage<InsertServerRequest> | undefined, b: InsertServerRequest | PlainMessage<InsertServerRequest> | undefined): boolean {
    return proto3.util.equals(InsertServerRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.InsertServerResponse
 */
export class InsertServerResponse extends Message<InsertServerResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  constructor(data?: PartialMessage<InsertServerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.InsertServerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InsertServerResponse {
    return new InsertServerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InsertServerResponse {
    return new InsertServerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InsertServerResponse {
    return new InsertServerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InsertServerResponse | PlainMessage<InsertServerResponse> | undefined, b: InsertServerResponse | PlainMessage<InsertServerResponse> | undefined): boolean {
    return proto3.util.equals(InsertServerResponse, a, b);
  }
}

/**
 * @generated from message api.as.v1.UpdateServerRequest
 */
export class UpdateServerRequest extends Message<UpdateServerRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: api.asm.v1.Server server = 3;
   */
  server?: Server;

  constructor(data?: PartialMessage<UpdateServerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.UpdateServerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "server", kind: "message", T: Server },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateServerRequest {
    return new UpdateServerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateServerRequest {
    return new UpdateServerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateServerRequest {
    return new UpdateServerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateServerRequest | PlainMessage<UpdateServerRequest> | undefined, b: UpdateServerRequest | PlainMessage<UpdateServerRequest> | undefined): boolean {
    return proto3.util.equals(UpdateServerRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.UpdateServerResponse
 */
export class UpdateServerResponse extends Message<UpdateServerResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  constructor(data?: PartialMessage<UpdateServerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.UpdateServerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateServerResponse {
    return new UpdateServerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateServerResponse {
    return new UpdateServerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateServerResponse {
    return new UpdateServerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateServerResponse | PlainMessage<UpdateServerResponse> | undefined, b: UpdateServerResponse | PlainMessage<UpdateServerResponse> | undefined): boolean {
    return proto3.util.equals(UpdateServerResponse, a, b);
  }
}

/**
 * @generated from message api.as.v1.QueryAllServerRequest
 */
export class QueryAllServerRequest extends Message<QueryAllServerRequest> {
  constructor(data?: PartialMessage<QueryAllServerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryAllServerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllServerRequest {
    return new QueryAllServerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllServerRequest {
    return new QueryAllServerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllServerRequest {
    return new QueryAllServerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllServerRequest | PlainMessage<QueryAllServerRequest> | undefined, b: QueryAllServerRequest | PlainMessage<QueryAllServerRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllServerRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.QueryAllServerResponse
 */
export class QueryAllServerResponse extends Message<QueryAllServerResponse> {
  /**
   * @generated from field: bool status = 1;
   */
  status = false;

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  /**
   * @generated from field: repeated api.asm.v1.ServerOption server_list = 3;
   */
  serverList: ServerOption[] = [];

  constructor(data?: PartialMessage<QueryAllServerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryAllServerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "server_list", kind: "message", T: ServerOption, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllServerResponse {
    return new QueryAllServerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllServerResponse {
    return new QueryAllServerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllServerResponse {
    return new QueryAllServerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllServerResponse | PlainMessage<QueryAllServerResponse> | undefined, b: QueryAllServerResponse | PlainMessage<QueryAllServerResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllServerResponse, a, b);
  }
}

/**
 * @generated from message api.as.v1.GetDomainListRequest
 */
export class GetDomainListRequest extends Message<GetDomainListRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: string mac = 3;
   */
  mac = "";

  constructor(data?: PartialMessage<GetDomainListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.GetDomainListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "mac", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDomainListRequest {
    return new GetDomainListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDomainListRequest {
    return new GetDomainListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDomainListRequest {
    return new GetDomainListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDomainListRequest | PlainMessage<GetDomainListRequest> | undefined, b: GetDomainListRequest | PlainMessage<GetDomainListRequest> | undefined): boolean {
    return proto3.util.equals(GetDomainListRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.GetDomainListResponse
 */
export class GetDomainListResponse extends Message<GetDomainListResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: repeated string server_list = 5;
   */
  serverList: string[] = [];

  constructor(data?: PartialMessage<GetDomainListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.GetDomainListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "server_list", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDomainListResponse {
    return new GetDomainListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDomainListResponse {
    return new GetDomainListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDomainListResponse {
    return new GetDomainListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDomainListResponse | PlainMessage<GetDomainListResponse> | undefined, b: GetDomainListResponse | PlainMessage<GetDomainListResponse> | undefined): boolean {
    return proto3.util.equals(GetDomainListResponse, a, b);
  }
}

/**
 * @generated from message api.as.v1.QueryChipByCodeRequest
 */
export class QueryChipByCodeRequest extends Message<QueryChipByCodeRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: string code = 3;
   */
  code = "";

  constructor(data?: PartialMessage<QueryChipByCodeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryChipByCodeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryChipByCodeRequest {
    return new QueryChipByCodeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryChipByCodeRequest {
    return new QueryChipByCodeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryChipByCodeRequest {
    return new QueryChipByCodeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryChipByCodeRequest | PlainMessage<QueryChipByCodeRequest> | undefined, b: QueryChipByCodeRequest | PlainMessage<QueryChipByCodeRequest> | undefined): boolean {
    return proto3.util.equals(QueryChipByCodeRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.QueryChipByCodeResponse
 */
export class QueryChipByCodeResponse extends Message<QueryChipByCodeResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: string chip_id = 5;
   */
  chipId = "";

  constructor(data?: PartialMessage<QueryChipByCodeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryChipByCodeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "chip_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryChipByCodeResponse {
    return new QueryChipByCodeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryChipByCodeResponse {
    return new QueryChipByCodeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryChipByCodeResponse {
    return new QueryChipByCodeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryChipByCodeResponse | PlainMessage<QueryChipByCodeResponse> | undefined, b: QueryChipByCodeResponse | PlainMessage<QueryChipByCodeResponse> | undefined): boolean {
    return proto3.util.equals(QueryChipByCodeResponse, a, b);
  }
}

/**
 * @generated from message api.as.v1.QueryServerGroupListRequest
 */
export class QueryServerGroupListRequest extends Message<QueryServerGroupListRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 5;
   */
  pageMeta?: PageMeta;

  constructor(data?: PartialMessage<QueryServerGroupListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryServerGroupListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "page_meta", kind: "message", T: PageMeta },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServerGroupListRequest {
    return new QueryServerGroupListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServerGroupListRequest {
    return new QueryServerGroupListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServerGroupListRequest {
    return new QueryServerGroupListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServerGroupListRequest | PlainMessage<QueryServerGroupListRequest> | undefined, b: QueryServerGroupListRequest | PlainMessage<QueryServerGroupListRequest> | undefined): boolean {
    return proto3.util.equals(QueryServerGroupListRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.QueryServerGroupListResponse
 */
export class QueryServerGroupListResponse extends Message<QueryServerGroupListResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 5;
   */
  pageMeta?: PageMeta;

  /**
   * @generated from field: repeated api.asm.v1.ServerGroup server_group_list = 6;
   */
  serverGroupList: ServerGroup[] = [];

  constructor(data?: PartialMessage<QueryServerGroupListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.QueryServerGroupListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "page_meta", kind: "message", T: PageMeta },
    { no: 6, name: "server_group_list", kind: "message", T: ServerGroup, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryServerGroupListResponse {
    return new QueryServerGroupListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryServerGroupListResponse {
    return new QueryServerGroupListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryServerGroupListResponse {
    return new QueryServerGroupListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryServerGroupListResponse | PlainMessage<QueryServerGroupListResponse> | undefined, b: QueryServerGroupListResponse | PlainMessage<QueryServerGroupListResponse> | undefined): boolean {
    return proto3.util.equals(QueryServerGroupListResponse, a, b);
  }
}

/**
 * @generated from message api.as.v1.InsertServerGroupRequest
 */
export class InsertServerGroupRequest extends Message<InsertServerGroupRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: api.asm.v1.ServerGroup server_group = 3;
   */
  serverGroup?: ServerGroup;

  constructor(data?: PartialMessage<InsertServerGroupRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.InsertServerGroupRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "server_group", kind: "message", T: ServerGroup },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InsertServerGroupRequest {
    return new InsertServerGroupRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InsertServerGroupRequest {
    return new InsertServerGroupRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InsertServerGroupRequest {
    return new InsertServerGroupRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InsertServerGroupRequest | PlainMessage<InsertServerGroupRequest> | undefined, b: InsertServerGroupRequest | PlainMessage<InsertServerGroupRequest> | undefined): boolean {
    return proto3.util.equals(InsertServerGroupRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.InsertServerGroupResponse
 */
export class InsertServerGroupResponse extends Message<InsertServerGroupResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  constructor(data?: PartialMessage<InsertServerGroupResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.InsertServerGroupResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InsertServerGroupResponse {
    return new InsertServerGroupResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InsertServerGroupResponse {
    return new InsertServerGroupResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InsertServerGroupResponse {
    return new InsertServerGroupResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InsertServerGroupResponse | PlainMessage<InsertServerGroupResponse> | undefined, b: InsertServerGroupResponse | PlainMessage<InsertServerGroupResponse> | undefined): boolean {
    return proto3.util.equals(InsertServerGroupResponse, a, b);
  }
}

/**
 * @generated from message api.as.v1.UpdateServerGroupRequest
 */
export class UpdateServerGroupRequest extends Message<UpdateServerGroupRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: api.asm.v1.ServerGroup server_group = 3;
   */
  serverGroup?: ServerGroup;

  constructor(data?: PartialMessage<UpdateServerGroupRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.UpdateServerGroupRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "server_group", kind: "message", T: ServerGroup },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateServerGroupRequest {
    return new UpdateServerGroupRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateServerGroupRequest {
    return new UpdateServerGroupRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateServerGroupRequest {
    return new UpdateServerGroupRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateServerGroupRequest | PlainMessage<UpdateServerGroupRequest> | undefined, b: UpdateServerGroupRequest | PlainMessage<UpdateServerGroupRequest> | undefined): boolean {
    return proto3.util.equals(UpdateServerGroupRequest, a, b);
  }
}

/**
 * @generated from message api.as.v1.UpdateServerGroupResponse
 */
export class UpdateServerGroupResponse extends Message<UpdateServerGroupResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  constructor(data?: PartialMessage<UpdateServerGroupResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.as.v1.UpdateServerGroupResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateServerGroupResponse {
    return new UpdateServerGroupResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateServerGroupResponse {
    return new UpdateServerGroupResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateServerGroupResponse {
    return new UpdateServerGroupResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateServerGroupResponse | PlainMessage<UpdateServerGroupResponse> | undefined, b: UpdateServerGroupResponse | PlainMessage<UpdateServerGroupResponse> | undefined): boolean {
    return proto3.util.equals(UpdateServerGroupResponse, a, b);
  }
}

