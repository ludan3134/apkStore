// as 服务, 即是 a3 的 grpc 服务

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file api/ts/v1/ts.proto (package api.ts.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { PageMeta } from "../../com/v1/pagemeta_pb.ts";
import { Phrase } from "../../tsm/v1/tsm_pb.ts";

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.ts.v1.CountPhraseRequest
 */
export class CountPhraseRequest extends Message<CountPhraseRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 ip = 3;
   */
  ip = protoInt64.zero;

  /**
   * @generated from field: string language = 4;
   */
  language = "";

  constructor(data?: PartialMessage<CountPhraseRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ts.v1.CountPhraseRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ip", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountPhraseRequest {
    return new CountPhraseRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountPhraseRequest {
    return new CountPhraseRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountPhraseRequest {
    return new CountPhraseRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CountPhraseRequest | PlainMessage<CountPhraseRequest> | undefined, b: CountPhraseRequest | PlainMessage<CountPhraseRequest> | undefined): boolean {
    return proto3.util.equals(CountPhraseRequest, a, b);
  }
}

/**
 * @generated from message api.ts.v1.CountPhraseResponse
 */
export class CountPhraseResponse extends Message<CountPhraseResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 lot_id = 3;
   */
  lotId = protoInt64.zero;

  /**
   * @generated from field: int32 total = 4;
   */
  total = 0;

  /**
   * @generated from field: bool status = 5;
   */
  status = false;

  /**
   * @generated from field: string language = 6;
   */
  language = "";

  /**
   * @generated from field: string message = 7;
   */
  message = "";

  constructor(data?: PartialMessage<CountPhraseResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ts.v1.CountPhraseResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "lot_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "total", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountPhraseResponse {
    return new CountPhraseResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountPhraseResponse {
    return new CountPhraseResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountPhraseResponse {
    return new CountPhraseResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CountPhraseResponse | PlainMessage<CountPhraseResponse> | undefined, b: CountPhraseResponse | PlainMessage<CountPhraseResponse> | undefined): boolean {
    return proto3.util.equals(CountPhraseResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.ts.v1.QueryPhraseListRequest
 */
export class QueryPhraseListRequest extends Message<QueryPhraseListRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 ip = 3;
   */
  ip = protoInt64.zero;

  /**
   * @generated from field: int64 lot_id = 4;
   */
  lotId = protoInt64.zero;

  /**
   * @generated from field: string language = 6;
   */
  language = "";

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 7;
   */
  pageMeta?: PageMeta;

  constructor(data?: PartialMessage<QueryPhraseListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ts.v1.QueryPhraseListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ip", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "lot_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "page_meta", kind: "message", T: PageMeta },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPhraseListRequest {
    return new QueryPhraseListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPhraseListRequest {
    return new QueryPhraseListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPhraseListRequest {
    return new QueryPhraseListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPhraseListRequest | PlainMessage<QueryPhraseListRequest> | undefined, b: QueryPhraseListRequest | PlainMessage<QueryPhraseListRequest> | undefined): boolean {
    return proto3.util.equals(QueryPhraseListRequest, a, b);
  }
}

/**
 * @generated from message api.ts.v1.QueryPhraseListResponse
 */
export class QueryPhraseListResponse extends Message<QueryPhraseListResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 lot_id = 3;
   */
  lotId = protoInt64.zero;

  /**
   * @generated from field: bool status = 4;
   */
  status = false;

  /**
   * @generated from field: string message = 5;
   */
  message = "";

  /**
   * @generated from field: string language = 6;
   */
  language = "";

  /**
   * @generated from field: api.com.v1.PageMeta page_meta = 7;
   */
  pageMeta?: PageMeta;

  /**
   * @generated from field: repeated api.tsm.v1.Phrase phrase_list = 8;
   */
  phraseList: Phrase[] = [];

  constructor(data?: PartialMessage<QueryPhraseListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ts.v1.QueryPhraseListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "lot_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "page_meta", kind: "message", T: PageMeta },
    { no: 8, name: "phrase_list", kind: "message", T: Phrase, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPhraseListResponse {
    return new QueryPhraseListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPhraseListResponse {
    return new QueryPhraseListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPhraseListResponse {
    return new QueryPhraseListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPhraseListResponse | PlainMessage<QueryPhraseListResponse> | undefined, b: QueryPhraseListResponse | PlainMessage<QueryPhraseListResponse> | undefined): boolean {
    return proto3.util.equals(QueryPhraseListResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.ts.v1.UpsertPhraseListRequest
 */
export class UpsertPhraseListRequest extends Message<UpsertPhraseListRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: int64 ip = 3;
   */
  ip = protoInt64.zero;

  /**
   * @generated from field: repeated api.tsm.v1.Phrase phrase_list = 4;
   */
  phraseList: Phrase[] = [];

  constructor(data?: PartialMessage<UpsertPhraseListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ts.v1.UpsertPhraseListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ip", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "phrase_list", kind: "message", T: Phrase, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertPhraseListRequest {
    return new UpsertPhraseListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertPhraseListRequest {
    return new UpsertPhraseListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertPhraseListRequest {
    return new UpsertPhraseListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertPhraseListRequest | PlainMessage<UpsertPhraseListRequest> | undefined, b: UpsertPhraseListRequest | PlainMessage<UpsertPhraseListRequest> | undefined): boolean {
    return proto3.util.equals(UpsertPhraseListRequest, a, b);
  }
}

/**
 * @generated from message api.ts.v1.UpsertPhraseListResponse
 */
export class UpsertPhraseListResponse extends Message<UpsertPhraseListResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  /**
   * @generated from field: repeated api.tsm.v1.Phrase phrase_list = 5;
   */
  phraseList: Phrase[] = [];

  constructor(data?: PartialMessage<UpsertPhraseListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ts.v1.UpsertPhraseListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "phrase_list", kind: "message", T: Phrase, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertPhraseListResponse {
    return new UpsertPhraseListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertPhraseListResponse {
    return new UpsertPhraseListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertPhraseListResponse {
    return new UpsertPhraseListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertPhraseListResponse | PlainMessage<UpsertPhraseListResponse> | undefined, b: UpsertPhraseListResponse | PlainMessage<UpsertPhraseListResponse> | undefined): boolean {
    return proto3.util.equals(UpsertPhraseListResponse, a, b);
  }
}

/**
 * ----------------------------------------------------------------------------------------------------------------------
 *
 * @generated from message api.ts.v1.PingRequest
 */
export class PingRequest extends Message<PingRequest> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: string message = 3;
   */
  message = "";

  constructor(data?: PartialMessage<PingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ts.v1.PingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingRequest {
    return new PingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingRequest {
    return new PingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingRequest {
    return new PingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PingRequest | PlainMessage<PingRequest> | undefined, b: PingRequest | PlainMessage<PingRequest> | undefined): boolean {
    return proto3.util.equals(PingRequest, a, b);
  }
}

/**
 * @generated from message api.ts.v1.PingResponse
 */
export class PingResponse extends Message<PingResponse> {
  /**
   * @generated from field: int64 transaction_id = 1;
   */
  transactionId = protoInt64.zero;

  /**
   * @generated from field: int64 session_id = 2;
   */
  sessionId = protoInt64.zero;

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  /**
   * @generated from field: string message = 4;
   */
  message = "";

  constructor(data?: PartialMessage<PingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.ts.v1.PingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "session_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingResponse {
    return new PingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingResponse {
    return new PingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingResponse {
    return new PingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PingResponse | PlainMessage<PingResponse> | undefined, b: PingResponse | PlainMessage<PingResponse> | undefined): boolean {
    return proto3.util.equals(PingResponse, a, b);
  }
}

